FROM ubuntu:22.04 AS base_image
ENV DEBIAN_FRONTEND=noninteractive
ENV DEBCONF_NOWARNINGS="yes"
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
 python3.10 \
 python3.10-venv \
 python3-pip \
 python3.10-distutils \
 build-essential \
 git \
 wget \
 libffi-dev \
 libssl-dev \
 libgl1-mesa-dev \
 libjpeg-dev \
 zlib1g-dev \
 libpng-dev \
 cmake \
 ninja-build \
 xclip \
 xserver-xorg \
 xvfb \
 # Qt6 dependencies for XCB
 libxcb-cursor0 \
 libxcb-xinput0 \
 libxcb-xfixes0 \
 libxcomposite1 \
 libxcb-icccm4 \
 libxcb-image0 \
 libxcb-keysyms1 \
 libxcb-randr0 \
 libxcb-render-util0 \
 libxcb-xinerama0 \
 libxcb-xkb1 \
 libxcb-glx0 \
 libxcb-shape0 \
 libxcb-shm0 \
 libxcb-sync1 \
 libxcb-dri2-0 \
 libxcb-dri3-0 \
 libxcb-present0 \
 libxkbcommon-x11-0 \
 libx11-xcb1 \
 libxcb1 \
 gstreamer1.0-gl \
 x11-utils \
 patchelf \
 mesa-utils \
 xauth \
 # Fontconfig and fonts
 fontconfig \
 fonts-liberation \
 mesa-utils \
 libglvnd0 \
 libgl1 \
 libglx0 \
 libegl1 \
 libxext6 \
 libx11-6 \
 x11-apps \
 # Add these new X11-related packages
 dbus-x11 \
 x11-xserver-utils \
 portaudio19-dev \
 alsa-utils \
 libasound2-plugins \
 espeak \
 && rm -rf /var/lib/apt/lists/*

# Add NVIDIA Container Toolkit setup for GPU access
RUN apt-get update && apt-get install -y software-properties-common && \
    add-apt-repository ppa:ubuntu-toolchain-r/test && \
    apt-get update && apt-get install -y libstdc++6 && \
    rm -rf /var/lib/apt/lists/*

# Install CUDA Toolkit 12.2
RUN apt-get update && apt-get install -y wget gnupg && \
    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin && \
    mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600 && \
    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb && \
    dpkg -i cuda-keyring_1.1-1_all.deb && \
    rm -f cuda-keyring_1.1-1_all.deb && \
    apt-get update && \
    apt-get install -y cuda-toolkit-12-2 nvidia-cuda-dev && \
    rm -rf /var/lib/apt/lists/*


# Install cuDNN backend packages
RUN apt-get update && apt-get install -y wget && \
    wget https://developer.download.nvidia.com/compute/cudnn/9.8.0/local_installers/cudnn-local-repo-ubuntu2204-9.8.0_1.0-1_amd64.deb && \
    dpkg -i cudnn-local-repo-ubuntu2204-9.8.0_1.0-1_amd64.deb && \
    cp /var/cudnn-local-*/cudnn-*-keyring.gpg /usr/share/keyrings/ && \
    apt-get update && apt-get install -y cudnn9-cuda-12 libcudnn9-cuda-12 && \
    rm -rf /var/lib/apt/lists/* cudnn-local-repo-ubuntu2204-9.8.0_1.0-1_amd64.deb

# Add CUDA binaries to PATH
ENV PATH=/usr/local/cuda/bin:$PATH
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH

# Set environment variables for CUDA and cuDNN
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=$CUDA_HOME/bin:$PATH
ENV LD_LIBRARY_PATH=$VIRTUAL_ENV/lib/python3.10/site-packages/PySide6/Qt/lib:/usr/lib/x86_64-linux-gnu:$CUDA_HOME/lib64:$CUDA_HOME/extras/CUPTI/lib64

# Set up NVIDIA runtime
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility

ARG INSTALL_XCB_CURSOR=0
RUN if [ "$INSTALL_XCB_CURSOR" = "1" ]; then \
      apt-get update && apt-get install -y libxcb-cursor0; \
    fi

RUN useradd -ms /bin/bash -u 1000 appuser
RUN mkdir -p /home/appuser/.local && chown -R appuser:appuser /home/appuser
RUN chown -R appuser:appuser /app

# Install xhost
RUN apt-get update && apt-get install -y x11-xserver-utils

# Create X11 directory with correct permissions
RUN mkdir -p /tmp/.X11-unix && chmod 1777 /tmp/.X11-unix

# Fix for Ubuntu 24.04 host X11 issues
RUN echo "#!/bin/bash\nxhost +local:docker || true\nexec \"\$@\"" > /usr/local/bin/entrypoint.sh && \
    chmod +x /usr/local/bin/entrypoint.sh

FROM base_image AS dev_image
USER appuser
WORKDIR /app

# Install Python dependencies and PyTorch with CUDA support
RUN pip install --no-cache-dir pip setuptools wheel --upgrade && \
    pip install nvidia-pyindex && \
    pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121

FROM dev_image AS final_image
USER root

COPY --chown=appuser:appuser . /app/

COPY ./package/asound.conf /etc/asound.conf

RUN ls -la /app
USER appuser

RUN pip install --no-cache-dir -e .[gui,linux,dev,art,llm,llm_weather,tts] && \
    pip install -U langchain-community && \
    pip install -U mediapipe && \
    pip install --no-cache-dir -U timm && \
    python3 -c "from accelerate.utils import write_basic_config; write_basic_config(mixed_precision='fp16')"

USER appuser


CMD ["/bin/bash"]
