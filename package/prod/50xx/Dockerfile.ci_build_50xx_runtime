FROM ghcr.io/capsize-games/airunner/airunner:linux_ci

WORKDIR /app

# Switch to root for system-level installations
USER root

# Add NVIDIA repository for CUDA 12.x
RUN apt-get update && apt-get install -y --no-install-recommends \
    gnupg2 curl ca-certificates && \
    curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/3bf863cc.pub | apt-key add - && \
    echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64 /" > /etc/apt/sources.list.d/cuda.list && \
    apt-get update && apt-get install -y --no-install-recommends \
    cuda-toolkit-12-5 \
    libcudnn9-cuda-12 \
    libcudnn9-dev-cuda-12 \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Set environment variables for CUDA 12.5
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=$CUDA_HOME/bin:$PATH
ENV LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH

# Fix permissions for appuser - use numeric UID/GID (1000 is typical for first user)
RUN mkdir -p /home/appuser/.local/share/airunner && \
    chown -R 1000:1000 /home/appuser

# Switch back to appuser for Python installations
USER 1000:1000

# Python environment setup
ENV PATH=/home/appuser/.local/bin:/home/appuser/.local/share/airunner/python/bin:$PATH
ENV PYTHONUSERBASE=/home/appuser/.local/share/airunner/python
ENV TORCH_HOME=/home/appuser/.local/share/airunner/torch/hub
ENV HF_HOME=/home/appuser/.local/share/airunner/.cache/huggingface
ENV HF_CACHE_DIR=/home/appuser/.local/share/airunner/.cache/huggingface
ENV PIP_CACHE_DIR=/home/appuser/.local/share/airunner/.cache/pip

# Install PyTorch nightly build with CUDA 12.8 support
RUN pip uninstall -y torch torchvision torchaudio && \
    pip install -U --pre torch torchvision torchaudio -f https://download.pytorch.org/whl/nightly/cu128 && \
    # Install NVIDIA libraries needed for CUDA compatibility
    pip install -U --pre nvidia-cuda-runtime-cu12 nvidia-cuda-cupti-cu12 nvidia-cuda-nvrtc-cu12 nvidia-cudnn-cu12

# Handle OpenVoice and MeloTTS installation
RUN if [ "$AIRUNNER_ENABLE_OPEN_VOICE" == "1" ]; then \
        if python3 -c "import openvoice" 2>/dev/null; then \
            echo "OpenVoice is already installed."; \
        else \
            echo "OpenVoice is not installed. Installing OpenVoice..."; \
            [ ! -d "OpenVoice" ] && git clone https://github.com/myshell-ai/OpenVoice.git; \
            cd OpenVoice && pip install --no-cache-dir -v . && cd .. && rm -rf OpenVoice; \
        fi; \
        if python3 -c "import melo" 2>/dev/null; then \
            echo "MeloTTS is already installed."; \
        else \
            echo "MeloTTS is not installed. Installing MeloTTS..."; \
            [ ! -d "MeloTTS" ] && git clone https://github.com/myshell-ai/MeloTTS.git; \
            cd MeloTTS && git checkout v0.1.2 && pip install --no-cache-dir -v . && cd .. && rm -rf MeloTTS; \
        fi; \
        echo "Downloading unidic..."; \
        python3 -m unidic download && echo "Unidic download complete."; \
    else \
        echo "Uninstalling OpenVoice and MeloTTS..."; \
        pip uninstall myshell-openvoice -y || true; \
        pip uninstall melotts -y || true; \
    fi

RUN pip install --no-cache-dir -v altgraph

# Handle Airunner installation
RUN if python3 -c "import airunner" 2>/dev/null; then \
        echo "Airunner is already installed."; \
        INSTALLED_VERSION=$(pip show airunner | grep Version | cut -d ' ' -f 2); \
        REQUIRED_VERSION=$(grep 'version=' /app/setup.py | sed -n "s/.*version=['\"]\([^'\"]*\)['\"].*/\1/p"); \
        echo "Installed version: $INSTALLED_VERSION"; \
        echo "Required version: $REQUIRED_VERSION"; \
        if [ "$INSTALLED_VERSION" != "$REQUIRED_VERSION" ]; then \
            echo "Airunner version $INSTALLED_VERSION is installed, but version $REQUIRED_VERSION is required."; \
            pip install --no-cache-dir -v -e .[all_dev] && \
            pip install --no-cache-dir -v -U langchain-community && \
            pip install --no-cache-dir -v -U mediapipe && \
            pip install --no-cache-dir -v -U timm; \
        else \
            echo "Airunner version $INSTALLED_VERSION is already installed."; \
        fi; \
    else \
        echo "Airunner is not installed. Installing the latest version..."; \
        pip install --no-cache-dir -v -e .[all_dev] && \
        pip install --no-cache-dir -v -U langchain-community && \
        pip install --no-cache-dir -v -U mediapipe && \
        pip install --no-cache-dir -v -U timm; \
    fi

# Handle NLTK punkt tokenizer installation
RUN if [ -f "/home/appuser/nltk_data/tokenizers/punkt/english.pickle" ]; then \
        echo "NLTK punkt tokenizer is already installed."; \
    else \
        echo "NLTK punkt tokenizer is not installed. Installing..."; \
        python3 -c "import nltk; nltk.download('punkt', quiet=True, halt_on_error=False, raise_on_error=False)"; \
        python3 -c "import nltk; nltk.download('stopwords', quiet=True, halt_on_error=False, raise_on_error=False)"; \
    fi