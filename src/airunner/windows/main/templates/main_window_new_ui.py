# Form implementation generated from reading ui file '/home/joe/Projects/imagetopixel/airunner/src/airunner/../../src/airunner/pyqt/templates/main_window_new.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1364, 866)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(8)
        MainWindow.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/icon_256.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.MinimumExpanding, QtWidgets.QSizePolicy.Policy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setMinimumSize(QtCore.QSize(0, 0))
        self.centralwidget.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.header_widget = QtWidgets.QFrame(parent=self.centralwidget)
        self.header_widget.setEnabled(True)
        self.header_widget.setMaximumSize(QtCore.QSize(16777215, 48))
        self.header_widget.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.header_widget.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.header_widget.setObjectName("header_widget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.header_widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.file_new_button = QtWidgets.QPushButton(parent=self.header_widget)
        self.file_new_button.setMinimumSize(QtCore.QSize(36, 36))
        self.file_new_button.setMaximumSize(QtCore.QSize(24, 36))
        self.file_new_button.setText("")
        icon = QtGui.QIcon.fromTheme("document-new")
        self.file_new_button.setIcon(icon)
        self.file_new_button.setIconSize(QtCore.QSize(24, 24))
        self.file_new_button.setFlat(True)
        self.file_new_button.setObjectName("file_new_button")
        self.horizontalLayout.addWidget(self.file_new_button)
        self.open_button = QtWidgets.QPushButton(parent=self.header_widget)
        self.open_button.setMinimumSize(QtCore.QSize(36, 36))
        self.open_button.setMaximumSize(QtCore.QSize(24, 36))
        self.open_button.setText("")
        icon = QtGui.QIcon.fromTheme("document-open")
        self.open_button.setIcon(icon)
        self.open_button.setIconSize(QtCore.QSize(24, 24))
        self.open_button.setFlat(True)
        self.open_button.setObjectName("open_button")
        self.horizontalLayout.addWidget(self.open_button)
        self.save_button = QtWidgets.QPushButton(parent=self.header_widget)
        self.save_button.setMinimumSize(QtCore.QSize(36, 36))
        self.save_button.setMaximumSize(QtCore.QSize(24, 36))
        self.save_button.setText("")
        icon = QtGui.QIcon.fromTheme("document-save")
        self.save_button.setIcon(icon)
        self.save_button.setIconSize(QtCore.QSize(24, 24))
        self.save_button.setFlat(True)
        self.save_button.setObjectName("save_button")
        self.horizontalLayout.addWidget(self.save_button)
        self.export_button = QtWidgets.QPushButton(parent=self.header_widget)
        self.export_button.setMinimumSize(QtCore.QSize(36, 36))
        self.export_button.setMaximumSize(QtCore.QSize(24, 36))
        self.export_button.setText("")
        icon = QtGui.QIcon.fromTheme("document-send")
        self.export_button.setIcon(icon)
        self.export_button.setIconSize(QtCore.QSize(24, 24))
        self.export_button.setFlat(True)
        self.export_button.setObjectName("export_button")
        self.horizontalLayout.addWidget(self.export_button)
        self.undo_button = QtWidgets.QPushButton(parent=self.header_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.undo_button.sizePolicy().hasHeightForWidth())
        self.undo_button.setSizePolicy(sizePolicy)
        self.undo_button.setMinimumSize(QtCore.QSize(36, 36))
        self.undo_button.setMaximumSize(QtCore.QSize(24, 36))
        self.undo_button.setStyleSheet("border-color: rgb(61, 56, 70);")
        self.undo_button.setText("")
        icon = QtGui.QIcon.fromTheme("edit-undo")
        self.undo_button.setIcon(icon)
        self.undo_button.setIconSize(QtCore.QSize(24, 24))
        self.undo_button.setFlat(True)
        self.undo_button.setObjectName("undo_button")
        self.horizontalLayout.addWidget(self.undo_button)
        self.redo_button = QtWidgets.QPushButton(parent=self.header_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.redo_button.sizePolicy().hasHeightForWidth())
        self.redo_button.setSizePolicy(sizePolicy)
        self.redo_button.setMinimumSize(QtCore.QSize(36, 36))
        self.redo_button.setMaximumSize(QtCore.QSize(24, 36))
        self.redo_button.setStyleSheet("border-color: rgb(61, 56, 70);")
        self.redo_button.setText("")
        icon = QtGui.QIcon.fromTheme("edit-redo")
        self.redo_button.setIcon(icon)
        self.redo_button.setIconSize(QtCore.QSize(24, 24))
        self.redo_button.setFlat(True)
        self.redo_button.setObjectName("redo_button")
        self.horizontalLayout.addWidget(self.redo_button)
        spacerItem = QtWidgets.QSpacerItem(0, 36, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.width_slider = SliderWidget(parent=self.header_widget)
        self.width_slider.setProperty("slider_minimum", 64)
        self.width_slider.setProperty("slider_maximum", 4096)
        self.width_slider.setProperty("spinbox_minimum", 64)
        self.width_slider.setProperty("spinbox_maximum", 4096)
        self.width_slider.setProperty("slider_tick_interval", 64)
        self.width_slider.setProperty("slider_single_step", 64)
        self.width_slider.setProperty("slider_page_step", 64)
        self.width_slider.setProperty("spinbox_single_step", 64)
        self.width_slider.setProperty("spinbox_page_step", 64)
        self.width_slider.setObjectName("width_slider")
        self.horizontalLayout.addWidget(self.width_slider)
        self.height_slider = SliderWidget(parent=self.header_widget)
        self.height_slider.setProperty("slider_minimum", 64)
        self.height_slider.setProperty("slider_maximum", 4096)
        self.height_slider.setProperty("spinbox_minimum", 64)
        self.height_slider.setProperty("spinbox_maximum", 4096)
        self.height_slider.setProperty("slider_tick_interval", 64)
        self.height_slider.setProperty("slider_single_step", 64)
        self.height_slider.setProperty("slider_page_step", 64)
        self.height_slider.setProperty("spinbox_single_step", 64)
        self.height_slider.setProperty("spinbox_page_step", 64)
        self.height_slider.setObjectName("height_slider")
        self.horizontalLayout.addWidget(self.height_slider)
        self.brush_size_slider = SliderWidget(parent=self.header_widget)
        self.brush_size_slider.setProperty("slider_minimum", 64)
        self.brush_size_slider.setProperty("slider_maximum", 4096)
        self.brush_size_slider.setProperty("spinbox_minimum", 64)
        self.brush_size_slider.setProperty("spinbox_maximum", 4096)
        self.brush_size_slider.setProperty("slider_tick_interval", 64)
        self.brush_size_slider.setProperty("slider_single_step", 64)
        self.brush_size_slider.setProperty("slider_page_step", 64)
        self.brush_size_slider.setProperty("spinbox_single_step", 64)
        self.brush_size_slider.setProperty("spinbox_page_step", 64)
        self.brush_size_slider.setObjectName("brush_size_slider")
        self.horizontalLayout.addWidget(self.brush_size_slider)
        self.gridLayout.addWidget(self.header_widget, 0, 0, 1, 1)
        self.main_splitter = QtWidgets.QSplitter(parent=self.centralwidget)
        self.main_splitter.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.main_splitter.setObjectName("main_splitter")
        self.content_splitter = QtWidgets.QSplitter(parent=self.main_splitter)
        self.content_splitter.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.content_splitter.setChildrenCollapsible(False)
        self.content_splitter.setObjectName("content_splitter")
        self.generator_widget = GeneratorTabWidget(parent=self.content_splitter)
        self.generator_widget.setObjectName("generator_widget")
        self.center_splitter = QtWidgets.QSplitter(parent=self.content_splitter)
        self.center_splitter.setMinimumSize(QtCore.QSize(512, 512))
        self.center_splitter.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.center_splitter.setObjectName("center_splitter")
        self.canvas_frame = QtWidgets.QFrame(parent=self.center_splitter)
        self.canvas_frame.setMinimumSize(QtCore.QSize(0, 0))
        self.canvas_frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.canvas_frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.canvas_frame.setObjectName("canvas_frame")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.canvas_frame)
        self.gridLayout_5.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.canvas_widget = CanvasWidget(parent=self.canvas_frame)
        self.canvas_widget.setObjectName("canvas_widget")
        self.gridLayout_5.addWidget(self.canvas_widget, 0, 0, 1, 1)
        self.right_panel_splitter = QtWidgets.QSplitter(parent=self.content_splitter)
        self.right_panel_splitter.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.right_panel_splitter.setChildrenCollapsible(False)
        self.right_panel_splitter.setObjectName("right_panel_splitter")
        self.tool_tab_widget = QtWidgets.QTabWidget(parent=self.right_panel_splitter)
        self.tool_tab_widget.setObjectName("tool_tab_widget")
        self.tab_embeddings = QtWidgets.QWidget()
        self.tab_embeddings.setObjectName("tab_embeddings")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.tab_embeddings)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.embeddings_container_widget = EmbeddingsContainerWidget(parent=self.tab_embeddings)
        self.embeddings_container_widget.setObjectName("embeddings_container_widget")
        self.gridLayout_6.addWidget(self.embeddings_container_widget, 0, 0, 1, 1)
        self.tool_tab_widget.addTab(self.tab_embeddings, "")
        self.tab_lora = QtWidgets.QWidget()
        self.tab_lora.setObjectName("tab_lora")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.tab_lora)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.lora_container_widget = LoraContainerWidget(parent=self.tab_lora)
        self.lora_container_widget.setObjectName("lora_container_widget")
        self.gridLayout_7.addWidget(self.lora_container_widget, 0, 0, 1, 1)
        self.tool_tab_widget.addTab(self.tab_lora, "")
        self.tab_pen_color = QtWidgets.QWidget()
        self.tab_pen_color.setObjectName("tab_pen_color")
        self.gridLayout_8 = QtWidgets.QGridLayout(self.tab_pen_color)
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.brush_container_widget = BrushContainerWidget(parent=self.tab_pen_color)
        self.brush_container_widget.setObjectName("brush_container_widget")
        self.gridLayout_8.addWidget(self.brush_container_widget, 0, 0, 1, 1)
        self.tool_tab_widget.addTab(self.tab_pen_color, "")
        self.frame = QtWidgets.QFrame(parent=self.right_panel_splitter)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.frame_2 = QtWidgets.QFrame(parent=self.right_panel_splitter)
        self.frame_2.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_2.setObjectName("frame_2")
        self.frame_3 = QtWidgets.QFrame(parent=self.right_panel_splitter)
        self.frame_3.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_3.setObjectName("frame_3")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame_3)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.layer_widget = LayerContainerWidget(parent=self.frame_3)
        self.layer_widget.setObjectName("layer_widget")
        self.gridLayout_2.addWidget(self.layer_widget, 0, 0, 1, 1)
        self.button_menu = QtWidgets.QFrame(parent=self.content_splitter)
        self.button_menu.setMinimumSize(QtCore.QSize(60, 0))
        self.button_menu.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.button_menu.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.button_menu.setObjectName("button_menu")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.button_menu)
        self.verticalLayout.setObjectName("verticalLayout")
        self.toggle_grid_button = QtWidgets.QPushButton(parent=self.button_menu)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toggle_grid_button.sizePolicy().hasHeightForWidth())
        self.toggle_grid_button.setSizePolicy(sizePolicy)
        self.toggle_grid_button.setMinimumSize(QtCore.QSize(35, 35))
        self.toggle_grid_button.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/032-pixels-light.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toggle_grid_button.setIcon(icon1)
        self.toggle_grid_button.setIconSize(QtCore.QSize(18, 18))
        self.toggle_grid_button.setCheckable(True)
        self.toggle_grid_button.setFlat(True)
        self.toggle_grid_button.setObjectName("toggle_grid_button")
        self.verticalLayout.addWidget(self.toggle_grid_button)
        self.toggle_brush_button = QtWidgets.QPushButton(parent=self.button_menu)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toggle_brush_button.sizePolicy().hasHeightForWidth())
        self.toggle_brush_button.setSizePolicy(sizePolicy)
        self.toggle_brush_button.setMinimumSize(QtCore.QSize(35, 35))
        self.toggle_brush_button.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/011-pencil-light.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toggle_brush_button.setIcon(icon2)
        self.toggle_brush_button.setIconSize(QtCore.QSize(18, 18))
        self.toggle_brush_button.setCheckable(True)
        self.toggle_brush_button.setFlat(True)
        self.toggle_brush_button.setObjectName("toggle_brush_button")
        self.verticalLayout.addWidget(self.toggle_brush_button)
        self.safety_checker_button = QtWidgets.QPushButton(parent=self.button_menu)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.safety_checker_button.sizePolicy().hasHeightForWidth())
        self.safety_checker_button.setSizePolicy(sizePolicy)
        self.safety_checker_button.setMinimumSize(QtCore.QSize(35, 35))
        self.safety_checker_button.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icons/039-18-light.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.safety_checker_button.setIcon(icon3)
        self.safety_checker_button.setIconSize(QtCore.QSize(18, 18))
        self.safety_checker_button.setCheckable(True)
        self.safety_checker_button.setFlat(True)
        self.safety_checker_button.setObjectName("safety_checker_button")
        self.verticalLayout.addWidget(self.safety_checker_button)
        self.focus_button = QtWidgets.QPushButton(parent=self.button_menu)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.focus_button.sizePolicy().hasHeightForWidth())
        self.focus_button.setSizePolicy(sizePolicy)
        self.focus_button.setMinimumSize(QtCore.QSize(35, 35))
        self.focus_button.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/icons/037-focus-light.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.focus_button.setIcon(icon4)
        self.focus_button.setIconSize(QtCore.QSize(18, 18))
        self.focus_button.setFlat(True)
        self.focus_button.setObjectName("focus_button")
        self.verticalLayout.addWidget(self.focus_button)
        self.toggle_active_grid_area_button = QtWidgets.QPushButton(parent=self.button_menu)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toggle_active_grid_area_button.sizePolicy().hasHeightForWidth())
        self.toggle_active_grid_area_button.setSizePolicy(sizePolicy)
        self.toggle_active_grid_area_button.setMinimumSize(QtCore.QSize(35, 35))
        self.toggle_active_grid_area_button.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/icons/038-drag-light.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toggle_active_grid_area_button.setIcon(icon5)
        self.toggle_active_grid_area_button.setIconSize(QtCore.QSize(18, 18))
        self.toggle_active_grid_area_button.setCheckable(True)
        self.toggle_active_grid_area_button.setFlat(True)
        self.toggle_active_grid_area_button.setObjectName("toggle_active_grid_area_button")
        self.verticalLayout.addWidget(self.toggle_active_grid_area_button)
        self.toggle_eraser_button = QtWidgets.QPushButton(parent=self.button_menu)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toggle_eraser_button.sizePolicy().hasHeightForWidth())
        self.toggle_eraser_button.setSizePolicy(sizePolicy)
        self.toggle_eraser_button.setMinimumSize(QtCore.QSize(35, 35))
        self.toggle_eraser_button.setText("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/icons/014-eraser-light.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toggle_eraser_button.setIcon(icon6)
        self.toggle_eraser_button.setIconSize(QtCore.QSize(18, 18))
        self.toggle_eraser_button.setCheckable(True)
        self.toggle_eraser_button.setFlat(True)
        self.toggle_eraser_button.setObjectName("toggle_eraser_button")
        self.verticalLayout.addWidget(self.toggle_eraser_button)
        self.settings_button = QtWidgets.QPushButton(parent=self.button_menu)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.settings_button.sizePolicy().hasHeightForWidth())
        self.settings_button.setSizePolicy(sizePolicy)
        self.settings_button.setMinimumSize(QtCore.QSize(35, 35))
        self.settings_button.setText("")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/icons/settings-light.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.settings_button.setIcon(icon7)
        self.settings_button.setIconSize(QtCore.QSize(18, 18))
        self.settings_button.setFlat(True)
        self.settings_button.setObjectName("settings_button")
        self.verticalLayout.addWidget(self.settings_button)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout.addItem(spacerItem1)
        self.bottom_panel_tab_widget = QtWidgets.QTabWidget(parent=self.main_splitter)
        self.bottom_panel_tab_widget.setTabPosition(QtWidgets.QTabWidget.TabPosition.South)
        self.bottom_panel_tab_widget.setObjectName("bottom_panel_tab_widget")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.tab_3)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.model_manager = ModelManagerWidget(parent=self.tab_3)
        self.model_manager.setObjectName("model_manager")
        self.gridLayout_4.addWidget(self.model_manager, 0, 0, 1, 1)
        self.bottom_panel_tab_widget.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.tab_4)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.prompt_builder = PromptBuilderWidget(parent=self.tab_4)
        self.prompt_builder.setObjectName("prompt_builder")
        self.gridLayout_3.addWidget(self.prompt_builder, 0, 0, 1, 1)
        self.bottom_panel_tab_widget.addTab(self.tab_4, "")
        self.gridLayout.addWidget(self.main_splitter, 1, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1364, 22))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.menubar.setFont(font)
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(parent=self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QtWidgets.QMenu(parent=self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuFilters = QtWidgets.QMenu(parent=self.menubar)
        self.menuFilters.setObjectName("menuFilters")
        self.menuAbout = QtWidgets.QMenu(parent=self.menubar)
        self.menuAbout.setTearOffEnabled(False)
        self.menuAbout.setObjectName("menuAbout")
        self.menuModel_merge = QtWidgets.QMenu(parent=self.menubar)
        self.menuModel_merge.setObjectName("menuModel_merge")
        self.menuImage = QtWidgets.QMenu(parent=self.menubar)
        self.menuImage.setObjectName("menuImage")
        self.menuPrompts = QtWidgets.QMenu(parent=self.menubar)
        self.menuPrompts.setObjectName("menuPrompts")
        self.menuView = QtWidgets.QMenu(parent=self.menubar)
        self.menuView.setObjectName("menuView")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNew = QtGui.QAction(parent=MainWindow)
        self.actionNew.setObjectName("actionNew")
        self.actionImport = QtGui.QAction(parent=MainWindow)
        self.actionImport.setObjectName("actionImport")
        self.actionExport = QtGui.QAction(parent=MainWindow)
        self.actionExport.setObjectName("actionExport")
        self.actionCopy = QtGui.QAction(parent=MainWindow)
        self.actionCopy.setObjectName("actionCopy")
        self.actionPaste = QtGui.QAction(parent=MainWindow)
        self.actionPaste.setObjectName("actionPaste")
        self.actionUndo = QtGui.QAction(parent=MainWindow)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("/home/joe/Projects/imagetopixel/airunner/src/airunner/../../src/airunner/pyqt/templates/../src/icons/007-undo.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionUndo.setIcon(icon8)
        self.actionUndo.setWhatsThis("")
        self.actionUndo.setObjectName("actionUndo")
        self.actionRedo = QtGui.QAction(parent=MainWindow)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("/home/joe/Projects/imagetopixel/airunner/src/airunner/../../src/airunner/pyqt/templates/../src/icons/008-redo.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionRedo.setIcon(icon9)
        self.actionRedo.setObjectName("actionRedo")
        self.actionGrid = QtGui.QAction(parent=MainWindow)
        self.actionGrid.setObjectName("actionGrid")
        self.actionPreferences = QtGui.QAction(parent=MainWindow)
        self.actionPreferences.setObjectName("actionPreferences")
        self.actionCanvas_color = QtGui.QAction(parent=MainWindow)
        self.actionCanvas_color.setObjectName("actionCanvas_color")
        self.actionReset_Settings = QtGui.QAction(parent=MainWindow)
        self.actionReset_Settings.setObjectName("actionReset_Settings")
        self.actionResize_on_Paste = QtGui.QAction(parent=MainWindow)
        self.actionResize_on_Paste.setCheckable(True)
        self.actionResize_on_Paste.setObjectName("actionResize_on_Paste")
        self.actionMemory = QtGui.QAction(parent=MainWindow)
        self.actionMemory.setObjectName("actionMemory")
        self.actionAbout = QtGui.QAction(parent=MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionCheck_for_updates = QtGui.QAction(parent=MainWindow)
        self.actionCheck_for_updates.setObjectName("actionCheck_for_updates")
        self.actionOpen = QtGui.QAction(parent=MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionView = QtGui.QAction(parent=MainWindow)
        self.actionView.setObjectName("actionView")
        self.actionAdvanced = QtGui.QAction(parent=MainWindow)
        self.actionAdvanced.setObjectName("actionAdvanced")
        self.actionGaussian_Blur = QtGui.QAction(parent=MainWindow)
        self.actionGaussian_Blur.setEnabled(True)
        self.actionGaussian_Blur.setObjectName("actionGaussian_Blur")
        self.actionBox_Blur = QtGui.QAction(parent=MainWindow)
        self.actionBox_Blur.setObjectName("actionBox_Blur")
        self.actionUnsharp_Mask = QtGui.QAction(parent=MainWindow)
        self.actionUnsharp_Mask.setObjectName("actionUnsharp_Mask")
        self.actionPixel_Art = QtGui.QAction(parent=MainWindow)
        self.actionPixel_Art.setVisible(True)
        self.actionPixel_Art.setObjectName("actionPixel_Art")
        self.actionInvert = QtGui.QAction(parent=MainWindow)
        self.actionInvert.setObjectName("actionInvert")
        self.actionSaturation = QtGui.QAction(parent=MainWindow)
        self.actionSaturation.setVisible(True)
        self.actionSaturation.setObjectName("actionSaturation")
        self.actionColor_Balance = QtGui.QAction(parent=MainWindow)
        self.actionColor_Balance.setCheckable(False)
        self.actionColor_Balance.setEnabled(True)
        self.actionColor_Balance.setVisible(True)
        self.actionColor_Balance.setObjectName("actionColor_Balance")
        self.actionSave = QtGui.QAction(parent=MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionLoad = QtGui.QAction(parent=MainWindow)
        self.actionLoad.setObjectName("actionLoad")
        self.actionQuit = QtGui.QAction(parent=MainWindow)
        self.actionQuit.setObjectName("actionQuit")
        self.actionPixel_Art_2 = QtGui.QAction(parent=MainWindow)
        self.actionPixel_Art_2.setObjectName("actionPixel_Art_2")
        self.actionBug_report = QtGui.QAction(parent=MainWindow)
        self.actionBug_report.setObjectName("actionBug_report")
        self.actionReport_vulnerability = QtGui.QAction(parent=MainWindow)
        self.actionReport_vulnerability.setObjectName("actionReport_vulnerability")
        self.actionDiscord = QtGui.QAction(parent=MainWindow)
        self.actionDiscord.setObjectName("actionDiscord")
        self.actionExtensions = QtGui.QAction(parent=MainWindow)
        self.actionExtensions.setObjectName("actionExtensions")
        self.actionShow_image_preview = QtGui.QAction(parent=MainWindow)
        self.actionShow_image_preview.setCheckable(True)
        self.actionShow_image_preview.setObjectName("actionShow_image_preview")
        self.actionImage_to_new_layer = QtGui.QAction(parent=MainWindow)
        self.actionImage_to_new_layer.setCheckable(True)
        self.actionImage_to_new_layer.setObjectName("actionImage_to_new_layer")
        self.actionAuto_export_images = QtGui.QAction(parent=MainWindow)
        self.actionAuto_export_images.setCheckable(True)
        self.actionAuto_export_images.setObjectName("actionAuto_export_images")
        self.actionImage_export_settings = QtGui.QAction(parent=MainWindow)
        self.actionImage_export_settings.setObjectName("actionImage_export_settings")
        self.actionCheck_for_latest_version_on_startup = QtGui.QAction(parent=MainWindow)
        self.actionCheck_for_latest_version_on_startup.setCheckable(True)
        self.actionCheck_for_latest_version_on_startup.setObjectName("actionCheck_for_latest_version_on_startup")
        self.actionModel_Merger = QtGui.QAction(parent=MainWindow)
        self.actionModel_Merger.setObjectName("actionModel_Merger")
        self.actionSaturation_Filter = QtGui.QAction(parent=MainWindow)
        self.actionSaturation_Filter.setObjectName("actionSaturation_Filter")
        self.actionColor_Balance_2 = QtGui.QAction(parent=MainWindow)
        self.actionColor_Balance_2.setObjectName("actionColor_Balance_2")
        self.actionRGB_Noise = QtGui.QAction(parent=MainWindow)
        self.actionRGB_Noise.setObjectName("actionRGB_Noise")
        self.actionGaussian_Blur_2 = QtGui.QAction(parent=MainWindow)
        self.actionGaussian_Blur_2.setObjectName("actionGaussian_Blur_2")
        self.actionBox_Blur_2 = QtGui.QAction(parent=MainWindow)
        self.actionBox_Blur_2.setObjectName("actionBox_Blur_2")
        self.actionRotate_90_clockwise = QtGui.QAction(parent=MainWindow)
        self.actionRotate_90_clockwise.setObjectName("actionRotate_90_clockwise")
        self.actionRotate_90_counter_clockwise = QtGui.QAction(parent=MainWindow)
        self.actionRotate_90_counter_clockwise.setObjectName("actionRotate_90_counter_clockwise")
        self.actionSave_prompt = QtGui.QAction(parent=MainWindow)
        self.actionSave_prompt.setObjectName("actionSave_prompt")
        self.actionShow_Active_Image_Area = QtGui.QAction(parent=MainWindow)
        self.actionShow_Active_Image_Area.setCheckable(True)
        self.actionShow_Active_Image_Area.setObjectName("actionShow_Active_Image_Area")
        self.actionImage_Interpolation = QtGui.QAction(parent=MainWindow)
        self.actionImage_Interpolation.setObjectName("actionImage_Interpolation")
        self.actionImage_interpolation = QtGui.QAction(parent=MainWindow)
        self.actionImage_interpolation.setObjectName("actionImage_interpolation")
        self.actionFilm = QtGui.QAction(parent=MainWindow)
        self.actionFilm.setObjectName("actionFilm")
        self.actionDeterministic_generation = QtGui.QAction(parent=MainWindow)
        self.actionDeterministic_generation.setObjectName("actionDeterministic_generation")
        self.actionDark_mode = QtGui.QAction(parent=MainWindow)
        self.actionDark_mode.setCheckable(True)
        self.actionDark_mode.setObjectName("actionDark_mode")
        self.actionConsole_window = QtGui.QAction(parent=MainWindow)
        self.actionConsole_window.setObjectName("actionConsole_window")
        self.actionSettings = QtGui.QAction(parent=MainWindow)
        self.actionSettings.setObjectName("actionSettings")
        self.actionPrompt_Browser = QtGui.QAction(parent=MainWindow)
        self.actionPrompt_Browser.setObjectName("actionPrompt_Browser")
        self.actionClear_all_prompts = QtGui.QAction(parent=MainWindow)
        self.actionClear_all_prompts.setObjectName("actionClear_all_prompts")
        self.actionUndo_2 = QtGui.QAction(parent=MainWindow)
        self.actionUndo_2.setIcon(icon8)
        self.actionUndo_2.setObjectName("actionUndo_2")
        self.actionRedo_2 = QtGui.QAction(parent=MainWindow)
        self.actionRedo_2.setIcon(icon9)
        self.actionRedo_2.setObjectName("actionRedo_2")
        self.actionCut = QtGui.QAction(parent=MainWindow)
        self.actionCut.setObjectName("actionCut")
        self.actionHalftone = QtGui.QAction(parent=MainWindow)
        self.actionHalftone.setObjectName("actionHalftone")
        self.actionQuick_Export = QtGui.QAction(parent=MainWindow)
        self.actionQuick_Export.setObjectName("actionQuick_Export")
        self.actionRegistration_error = QtGui.QAction(parent=MainWindow)
        self.actionRegistration_error.setObjectName("actionRegistration_error")
        self.actionHuggingface_Cache_manager = QtGui.QAction(parent=MainWindow)
        self.actionHuggingface_Cache_manager.setObjectName("actionHuggingface_Cache_manager")
        self.actionModel_Manager = QtGui.QAction(parent=MainWindow)
        self.actionModel_Manager.setObjectName("actionModel_Manager")
        self.actionModel_Manager_2 = QtGui.QAction(parent=MainWindow)
        self.actionModel_Manager_2.setObjectName("actionModel_Manager_2")
        self.actionControlNet = QtGui.QAction(parent=MainWindow)
        self.actionControlNet.setObjectName("actionControlNet")
        self.actionPrompt_Builder = QtGui.QAction(parent=MainWindow)
        self.actionPrompt_Builder.setObjectName("actionPrompt_Builder")
        self.actionEmbeddings = QtGui.QAction(parent=MainWindow)
        self.actionEmbeddings.setObjectName("actionEmbeddings")
        self.actionLoRA = QtGui.QAction(parent=MainWindow)
        self.actionLoRA.setObjectName("actionLoRA")
        self.actionPen = QtGui.QAction(parent=MainWindow)
        self.actionPen.setObjectName("actionPen")
        self.actionStableDiffusion = QtGui.QAction(parent=MainWindow)
        self.actionStableDiffusion.setObjectName("actionStableDiffusion")
        self.actionKandinsky = QtGui.QAction(parent=MainWindow)
        self.actionKandinsky.setObjectName("actionKandinsky")
        self.actionShap_E = QtGui.QAction(parent=MainWindow)
        self.actionShap_E.setObjectName("actionShap_E")
        self.actionRun_setup_wizard = QtGui.QAction(parent=MainWindow)
        self.actionRun_setup_wizard.setObjectName("actionRun_setup_wizard")
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionLoad)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionQuit)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionUndo)
        self.menuEdit.addAction(self.actionRedo)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionCut)
        self.menuEdit.addAction(self.actionCopy)
        self.menuEdit.addAction(self.actionPaste)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionRotate_90_clockwise)
        self.menuEdit.addAction(self.actionRotate_90_counter_clockwise)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionClear_all_prompts)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionSettings)
        self.menuFilters.addSeparator()
        self.menuFilters.addAction(self.actionInvert)
        self.menuFilters.addAction(self.actionFilm)
        self.menuAbout.addAction(self.actionAbout)
        self.menuAbout.addAction(self.actionBug_report)
        self.menuAbout.addAction(self.actionReport_vulnerability)
        self.menuAbout.addAction(self.actionDiscord)
        self.menuModel_merge.addAction(self.actionImage_interpolation)
        self.menuModel_merge.addAction(self.actionModel_Merger)
        self.menuModel_merge.addSeparator()
        self.menuModel_merge.addAction(self.actionStableDiffusion)
        self.menuModel_merge.addAction(self.actionKandinsky)
        self.menuModel_merge.addAction(self.actionShap_E)
        self.menuModel_merge.addSeparator()
        self.menuModel_merge.addAction(self.actionPrompt_Builder)
        self.menuModel_merge.addAction(self.actionControlNet)
        self.menuModel_merge.addAction(self.actionModel_Manager_2)
        self.menuModel_merge.addSeparator()
        self.menuModel_merge.addAction(self.actionEmbeddings)
        self.menuModel_merge.addAction(self.actionLoRA)
        self.menuModel_merge.addAction(self.actionPen)
        self.menuImage.addAction(self.actionImport)
        self.menuImage.addAction(self.actionExport)
        self.menuImage.addSeparator()
        self.menuImage.addAction(self.actionQuick_Export)
        self.menuPrompts.addAction(self.actionSave_prompt)
        self.menuPrompts.addAction(self.actionPrompt_Browser)
        self.menuView.addAction(self.actionHuggingface_Cache_manager)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuImage.menuAction())
        self.menubar.addAction(self.menuPrompts.menuAction())
        self.menubar.addAction(self.menuModel_merge.menuAction())
        self.menubar.addAction(self.menuFilters.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())

        self.retranslateUi(MainWindow)
        self.tool_tab_widget.setCurrentIndex(0)
        self.bottom_panel_tab_widget.setCurrentIndex(0)
        self.actionHuggingface_Cache_manager.triggered.connect(MainWindow.action_show_hf_cache_manager) # type: ignore
        self.actionModel_Merger.triggered.connect(MainWindow.action_show_model_merger_window) # type: ignore
        self.actionAbout.triggered.connect(MainWindow.action_show_about_window) # type: ignore
        self.actionKandinsky.triggered.connect(MainWindow.action_show_kandinsky) # type: ignore
        self.actionStableDiffusion.triggered.connect(MainWindow.action_show_stablediffusion) # type: ignore
        self.actionShap_E.triggered.connect(MainWindow.action_show_shape) # type: ignore
        self.actionModel_Manager.triggered.connect(MainWindow.action_show_model_manager) # type: ignore
        self.actionPrompt_Builder.triggered.connect(MainWindow.action_show_prompt_builder) # type: ignore
        self.actionControlNet.triggered.connect(MainWindow.action_show_controlnet) # type: ignore
        self.actionEmbeddings.triggered.connect(MainWindow.action_show_embeddings) # type: ignore
        self.actionLoRA.triggered.connect(MainWindow.action_show_lora) # type: ignore
        self.actionPen.triggered.connect(MainWindow.action_show_pen) # type: ignore
        self.toggle_grid_button.toggled['bool'].connect(MainWindow.action_toggle_grid) # type: ignore
        self.toggle_brush_button.toggled['bool'].connect(MainWindow.action_toggle_brush) # type: ignore
        self.toggle_active_grid_area_button.toggled['bool'].connect(MainWindow.action_toggle_active_grid_area) # type: ignore
        self.toggle_eraser_button.toggled['bool'].connect(MainWindow.action_toggle_eraser) # type: ignore
        self.focus_button.clicked.connect(MainWindow.action_focus_button_triggered) # type: ignore
        self.settings_button.clicked.connect(MainWindow.action_show_settings) # type: ignore
        self.undo_button.clicked.connect(MainWindow.action_undo_triggered) # type: ignore
        self.redo_button.clicked.connect(MainWindow.action_redo_triggered) # type: ignore
        self.open_button.clicked.connect(MainWindow.action_load_document_triggered) # type: ignore
        self.save_button.clicked.connect(MainWindow.action_save_document_triggered) # type: ignore
        self.export_button.clicked.connect(MainWindow.action_quick_export_image_triggered) # type: ignore
        self.tool_tab_widget.currentChanged['int'].connect(MainWindow.tool_tab_index_changed) # type: ignore
        self.bottom_panel_tab_widget.currentChanged['int'].connect(MainWindow.bottom_panel_tab_index_changed) # type: ignore
        self.right_panel_splitter.splitterMoved['int','int'].connect(MainWindow.right_splitter_moved) # type: ignore
        self.main_splitter.splitterMoved['int','int'].connect(MainWindow.main_splitter_moved) # type: ignore
        self.content_splitter.splitterMoved['int','int'].connect(MainWindow.content_splitter_moved) # type: ignore
        self.actionLoad.triggered.connect(MainWindow.action_load_document_triggered) # type: ignore
        self.actionExport.triggered.connect(MainWindow.action_export_image_triggered) # type: ignore
        self.file_new_button.clicked.connect(MainWindow.action_new_document_triggered) # type: ignore
        self.actionNew.triggered.connect(MainWindow.action_new_document_triggered) # type: ignore
        self.safety_checker_button.toggled['bool'].connect(MainWindow.action_toggle_nsfw_filter_triggered) # type: ignore
        self.actionSave.triggered.connect(MainWindow.action_save_document_triggered) # type: ignore
        self.actionImport.triggered.connect(MainWindow.action_import_image_triggered) # type: ignore
        self.actionQuick_Export.triggered.connect(MainWindow.action_quick_export_image_triggered) # type: ignore
        self.actionQuit.triggered.connect(MainWindow.action_quit_triggered) # type: ignore
        self.actionPaste.triggered.connect(MainWindow.action_paste_image_triggered) # type: ignore
        self.actionCopy.triggered.connect(MainWindow.action_copy_image_triggered) # type: ignore
        self.actionCut.triggered.connect(MainWindow.action_cut_image_triggered) # type: ignore
        self.actionRotate_90_clockwise.triggered.connect(MainWindow.action_rotate_90_clockwise_triggered) # type: ignore
        self.actionRotate_90_counter_clockwise.triggered.connect(MainWindow.action_rotate_90_counterclockwise_triggered) # type: ignore
        self.actionSave_prompt.triggered.connect(MainWindow.action_save_prompt_triggered) # type: ignore
        self.actionPrompt_Browser.triggered.connect(MainWindow.action_show_prompt_browser_triggered) # type: ignore
        self.actionImage_Interpolation.triggered.connect(MainWindow.action_show_image_interpolation_triggered) # type: ignore
        self.actionClear_all_prompts.triggered.connect(MainWindow.action_clear_all_prompts_triggered) # type: ignore
        self.actionSettings.triggered.connect(MainWindow.action_show_settings) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "AI Runner"))
        self.export_button.setToolTip(_translate("MainWindow", "Fast Export Image"))
        self.undo_button.setToolTip(_translate("MainWindow", "Undo"))
        self.redo_button.setToolTip(_translate("MainWindow", "Redo"))
        self.width_slider.setProperty("label_text", _translate("MainWindow", "Active Grid Width"))
        self.width_slider.setProperty("slider_callback", _translate("MainWindow", "width_slider_callback"))
        self.height_slider.setProperty("label_text", _translate("MainWindow", "Active Grid Height"))
        self.height_slider.setProperty("slider_callback", _translate("MainWindow", "height_slider_callback"))
        self.brush_size_slider.setProperty("label_text", _translate("MainWindow", "Brush Size"))
        self.brush_size_slider.setProperty("slider_callback", _translate("MainWindow", "brush_size_slider_callback"))
        self.tool_tab_widget.setTabText(self.tool_tab_widget.indexOf(self.tab_embeddings), _translate("MainWindow", "Embeddings"))
        self.tool_tab_widget.setTabText(self.tool_tab_widget.indexOf(self.tab_lora), _translate("MainWindow", "LoRA"))
        self.tool_tab_widget.setTabText(self.tool_tab_widget.indexOf(self.tab_pen_color), _translate("MainWindow", "Pen"))
        self.bottom_panel_tab_widget.setTabText(self.bottom_panel_tab_widget.indexOf(self.tab_3), _translate("MainWindow", "Model Manager"))
        self.bottom_panel_tab_widget.setTabText(self.bottom_panel_tab_widget.indexOf(self.tab_4), _translate("MainWindow", "Prompt Builder"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.menuFilters.setTitle(_translate("MainWindow", "Filters"))
        self.menuAbout.setTitle(_translate("MainWindow", "Help"))
        self.menuModel_merge.setTitle(_translate("MainWindow", "Tools"))
        self.menuImage.setTitle(_translate("MainWindow", "Image"))
        self.menuPrompts.setTitle(_translate("MainWindow", "Prompts"))
        self.menuView.setTitle(_translate("MainWindow", "View"))
        self.actionNew.setText(_translate("MainWindow", "New"))
        self.actionNew.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionImport.setText(_translate("MainWindow", "Import image"))
        self.actionImport.setShortcut(_translate("MainWindow", "Ctrl+I"))
        self.actionExport.setText(_translate("MainWindow", "Export image"))
        self.actionExport.setShortcut(_translate("MainWindow", "Ctrl+E"))
        self.actionCopy.setText(_translate("MainWindow", "Copy"))
        self.actionCopy.setShortcut(_translate("MainWindow", "Ctrl+C"))
        self.actionPaste.setText(_translate("MainWindow", "Paste"))
        self.actionPaste.setShortcut(_translate("MainWindow", "Ctrl+V"))
        self.actionUndo.setText(_translate("MainWindow", "Undo"))
        self.actionUndo.setToolTip(_translate("MainWindow", "Undo"))
        self.actionUndo.setShortcut(_translate("MainWindow", "Ctrl+Z"))
        self.actionRedo.setText(_translate("MainWindow", "Redo"))
        self.actionRedo.setShortcut(_translate("MainWindow", "Ctrl+Y"))
        self.actionGrid.setText(_translate("MainWindow", "Grid"))
        self.actionGrid.setToolTip(_translate("MainWindow", "Grid settings"))
        self.actionPreferences.setText(_translate("MainWindow", "Path Preferences"))
        self.actionPreferences.setToolTip(_translate("MainWindow", "Modify model path and more"))
        self.actionCanvas_color.setText(_translate("MainWindow", "Canvas color"))
        self.actionCanvas_color.setToolTip(_translate("MainWindow", "Change the color of the canvas"))
        self.actionReset_Settings.setText(_translate("MainWindow", "Reset Settings to Default"))
        self.actionReset_Settings.setToolTip(_translate("MainWindow", "Reset all settings to default"))
        self.actionResize_on_Paste.setText(_translate("MainWindow", "Resize on Import"))
        self.actionResize_on_Paste.setToolTip(_translate("MainWindow", "Resize the image to active grid area when importing"))
        self.actionMemory.setText(_translate("MainWindow", "Memory"))
        self.actionAbout.setText(_translate("MainWindow", "About"))
        self.actionCheck_for_updates.setText(_translate("MainWindow", "Check for updates"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionView.setText(_translate("MainWindow", "View"))
        self.actionAdvanced.setText(_translate("MainWindow", "Memory Preferences"))
        self.actionAdvanced.setToolTip(_translate("MainWindow", "Change memory settings"))
        self.actionGaussian_Blur.setText(_translate("MainWindow", "Gaussian Blur"))
        self.actionBox_Blur.setText(_translate("MainWindow", "Box Blur"))
        self.actionUnsharp_Mask.setText(_translate("MainWindow", "Unsharp Mask"))
        self.actionPixel_Art.setText(_translate("MainWindow", "Pixel Art"))
        self.actionInvert.setText(_translate("MainWindow", "Invert"))
        self.actionSaturation.setText(_translate("MainWindow", "Saturation"))
        self.actionColor_Balance.setText(_translate("MainWindow", "Color Balance"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        self.actionSave.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionLoad.setText(_translate("MainWindow", "Open"))
        self.actionLoad.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionQuit.setText(_translate("MainWindow", "Quit"))
        self.actionQuit.setShortcut(_translate("MainWindow", "Ctrl+Q"))
        self.actionPixel_Art_2.setText(_translate("MainWindow", "Pixel Art"))
        self.actionBug_report.setText(_translate("MainWindow", "Bug report"))
        self.actionReport_vulnerability.setText(_translate("MainWindow", "Report vulnerability"))
        self.actionDiscord.setText(_translate("MainWindow", "Discord"))
        self.actionExtensions.setText(_translate("MainWindow", "Extensions"))
        self.actionExtensions.setToolTip(_translate("MainWindow", "Install, update and delete extensions"))
        self.actionShow_image_preview.setText(_translate("MainWindow", "Show image preview"))
        self.actionImage_to_new_layer.setText(_translate("MainWindow", "Image to new layer"))
        self.actionImage_to_new_layer.setToolTip(_translate("MainWindow", "Send generated images to new layer"))
        self.actionAuto_export_images.setText(_translate("MainWindow", "Auto export images"))
        self.actionAuto_export_images.setToolTip(_translate("MainWindow", "Automatically export newly generated images to a folder"))
        self.actionImage_export_settings.setText(_translate("MainWindow", "Import / export preferences"))
        self.actionCheck_for_latest_version_on_startup.setText(_translate("MainWindow", "Check for latest version on startup"))
        self.actionModel_Merger.setText(_translate("MainWindow", "Model Merger"))
        self.actionSaturation_Filter.setText(_translate("MainWindow", "Saturation"))
        self.actionColor_Balance_2.setText(_translate("MainWindow", "Color Balance"))
        self.actionRGB_Noise.setText(_translate("MainWindow", "RGB Noise"))
        self.actionGaussian_Blur_2.setText(_translate("MainWindow", "Gaussian Blur"))
        self.actionBox_Blur_2.setText(_translate("MainWindow", "Box Blur"))
        self.actionRotate_90_clockwise.setText(_translate("MainWindow", "Rotate 90° clockwise"))
        self.actionRotate_90_clockwise.setShortcut(_translate("MainWindow", "Ctrl+R"))
        self.actionRotate_90_counter_clockwise.setText(_translate("MainWindow", "Rotate 90° counter clockwise"))
        self.actionRotate_90_counter_clockwise.setShortcut(_translate("MainWindow", "Ctrl+Shift+R"))
        self.actionSave_prompt.setText(_translate("MainWindow", "Save prompt"))
        self.actionShow_Active_Image_Area.setText(_translate("MainWindow", "Show Active Image Area"))
        self.actionImage_Interpolation.setText(_translate("MainWindow", "Image Interpolation"))
        self.actionImage_interpolation.setText(_translate("MainWindow", "Image Interpolation"))
        self.actionFilm.setText(_translate("MainWindow", "Film"))
        self.actionDeterministic_generation.setText(_translate("MainWindow", "Deterministic generator"))
        self.actionDark_mode.setText(_translate("MainWindow", "Dark mode"))
        self.actionConsole_window.setText(_translate("MainWindow", "Console window"))
        self.actionSettings.setText(_translate("MainWindow", "Preferences"))
        self.actionPrompt_Browser.setText(_translate("MainWindow", "Prompt browser"))
        self.actionClear_all_prompts.setText(_translate("MainWindow", "Clear all prompts"))
        self.actionClear_all_prompts.setToolTip(_translate("MainWindow", "Remove text from all prompts and negative prompts"))
        self.actionUndo_2.setText(_translate("MainWindow", "Undo"))
        self.actionUndo_2.setShortcut(_translate("MainWindow", "Ctrl+Z"))
        self.actionRedo_2.setText(_translate("MainWindow", "Redo"))
        self.actionRedo_2.setShortcut(_translate("MainWindow", "Ctrl+Y"))
        self.actionCut.setText(_translate("MainWindow", "Cut"))
        self.actionCut.setShortcut(_translate("MainWindow", "Ctrl+X"))
        self.actionHalftone.setText(_translate("MainWindow", "Halftone"))
        self.actionQuick_Export.setText(_translate("MainWindow", "Fast Export"))
        self.actionQuick_Export.setShortcut(_translate("MainWindow", "Ctrl+Shift+E"))
        self.actionRegistration_error.setText(_translate("MainWindow", "Registration error"))
        self.actionHuggingface_Cache_manager.setText(_translate("MainWindow", "Browse Huggingface Cache"))
        self.actionModel_Manager.setText(_translate("MainWindow", "Model Manager"))
        self.actionModel_Manager_2.setText(_translate("MainWindow", "Model Manager"))
        self.actionControlNet.setText(_translate("MainWindow", "ControlNet"))
        self.actionPrompt_Builder.setText(_translate("MainWindow", "Prompt Builder"))
        self.actionEmbeddings.setText(_translate("MainWindow", "Embeddings"))
        self.actionLoRA.setText(_translate("MainWindow", "LoRA"))
        self.actionPen.setText(_translate("MainWindow", "Pen"))
        self.actionStableDiffusion.setText(_translate("MainWindow", "Stable Diffusion"))
        self.actionKandinsky.setText(_translate("MainWindow", "Kandinsky"))
        self.actionShap_E.setText(_translate("MainWindow", "Shap-E"))
        self.actionRun_setup_wizard.setText(_translate("MainWindow", "Run setup wizard"))
from airunner.widgets.brush.brush_container_widget import BrushContainerWidget
from airunner.widgets.canvas.canvas_widget import CanvasWidget
from airunner.widgets.embeddings.embeddings_container_widget import EmbeddingsContainerWidget
from airunner.widgets.generator_form.generator_tab_widget import GeneratorTabWidget
from airunner.widgets.layers.layer_container_widget import LayerContainerWidget
from airunner.widgets.lora.lora_container_widget import LoraContainerWidget
from airunner.widgets.model_manager.model_manager_widget import ModelManagerWidget
from airunner.widgets.prompt_builder.prompt_builder_widget import PromptBuilderWidget
from airunner.widgets.slider.slider_widget import SliderWidget
