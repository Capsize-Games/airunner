# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'main_window.ui'
##
## Created by: Qt User Interface Compiler version 6.7.0
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QAction, QBrush, QColor, QConicalGradient,
    QCursor, QFont, QFontDatabase, QGradient,
    QIcon, QImage, QKeySequence, QLinearGradient,
    QPainter, QPalette, QPixmap, QRadialGradient,
    QTransform)
from PySide6.QtWidgets import (QApplication, QGridLayout, QMainWindow, QMenu,
    QMenuBar, QSizePolicy, QSplitter, QStatusBar,
    QToolBar, QVBoxLayout, QWidget)

from airunner.widgets.canvas.canvas_widget import CanvasWidget
from airunner.widgets.generator_form.generator_form_widget import GeneratorForm
from airunner.widgets.tool_tab.tool_tab_widget import ToolTabWidget
import airunner.resources_light_rc
import airunner.resources_dark_rc

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        if not MainWindow.objectName():
            MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(829, 736)
        sizePolicy = QSizePolicy(QSizePolicy.Policy.Preferred, QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QSize(0, 0))
        font = QFont()
        font.setPointSize(8)
        MainWindow.setFont(font)
        icon = QIcon()
        icon.addFile(u":/icons/icon_256.png", QSize(), QIcon.Normal, QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet(u"")
        self.actionNew = QAction(MainWindow)
        self.actionNew.setObjectName(u"actionNew")
        icon1 = QIcon(QIcon.fromTheme(u"document-new"))
        self.actionNew.setIcon(icon1)
        self.actionImport = QAction(MainWindow)
        self.actionImport.setObjectName(u"actionImport")
        icon2 = QIcon(QIcon.fromTheme(u"document-open"))
        self.actionImport.setIcon(icon2)
        self.actionExport = QAction(MainWindow)
        self.actionExport.setObjectName(u"actionExport")
        self.actionCopy = QAction(MainWindow)
        self.actionCopy.setObjectName(u"actionCopy")
        self.actionPaste = QAction(MainWindow)
        self.actionPaste.setObjectName(u"actionPaste")
        self.actionUndo = QAction(MainWindow)
        self.actionUndo.setObjectName(u"actionUndo")
        icon3 = QIcon(QIcon.fromTheme(u"edit-undo"))
        self.actionUndo.setIcon(icon3)
        self.actionRedo = QAction(MainWindow)
        self.actionRedo.setObjectName(u"actionRedo")
        icon4 = QIcon(QIcon.fromTheme(u"edit-redo"))
        self.actionRedo.setIcon(icon4)
        self.actionGrid = QAction(MainWindow)
        self.actionGrid.setObjectName(u"actionGrid")
        self.actionPreferences = QAction(MainWindow)
        self.actionPreferences.setObjectName(u"actionPreferences")
        self.actionCanvas_color = QAction(MainWindow)
        self.actionCanvas_color.setObjectName(u"actionCanvas_color")
        self.actionReset_Settings = QAction(MainWindow)
        self.actionReset_Settings.setObjectName(u"actionReset_Settings")
        self.actionResize_on_Paste = QAction(MainWindow)
        self.actionResize_on_Paste.setObjectName(u"actionResize_on_Paste")
        self.actionResize_on_Paste.setCheckable(True)
        self.actionMemory = QAction(MainWindow)
        self.actionMemory.setObjectName(u"actionMemory")
        self.actionAbout = QAction(MainWindow)
        self.actionAbout.setObjectName(u"actionAbout")
        self.actionCheck_for_updates = QAction(MainWindow)
        self.actionCheck_for_updates.setObjectName(u"actionCheck_for_updates")
        self.actionOpen = QAction(MainWindow)
        self.actionOpen.setObjectName(u"actionOpen")
        self.actionView = QAction(MainWindow)
        self.actionView.setObjectName(u"actionView")
        self.actionAdvanced = QAction(MainWindow)
        self.actionAdvanced.setObjectName(u"actionAdvanced")
        self.actionGaussian_Blur = QAction(MainWindow)
        self.actionGaussian_Blur.setObjectName(u"actionGaussian_Blur")
        self.actionGaussian_Blur.setEnabled(True)
        self.actionBox_Blur = QAction(MainWindow)
        self.actionBox_Blur.setObjectName(u"actionBox_Blur")
        self.actionUnsharp_Mask = QAction(MainWindow)
        self.actionUnsharp_Mask.setObjectName(u"actionUnsharp_Mask")
        self.actionPixel_Art = QAction(MainWindow)
        self.actionPixel_Art.setObjectName(u"actionPixel_Art")
        self.actionPixel_Art.setVisible(True)
        self.actionInvert = QAction(MainWindow)
        self.actionInvert.setObjectName(u"actionInvert")
        self.actionSaturation = QAction(MainWindow)
        self.actionSaturation.setObjectName(u"actionSaturation")
        self.actionSaturation.setVisible(True)
        self.actionColor_Balance = QAction(MainWindow)
        self.actionColor_Balance.setObjectName(u"actionColor_Balance")
        self.actionColor_Balance.setCheckable(False)
        self.actionColor_Balance.setEnabled(True)
        self.actionColor_Balance.setVisible(True)
        self.actionSave = QAction(MainWindow)
        self.actionSave.setObjectName(u"actionSave")
        self.actionLoad = QAction(MainWindow)
        self.actionLoad.setObjectName(u"actionLoad")
        self.actionQuit = QAction(MainWindow)
        self.actionQuit.setObjectName(u"actionQuit")
        self.actionPixel_Art_2 = QAction(MainWindow)
        self.actionPixel_Art_2.setObjectName(u"actionPixel_Art_2")
        self.actionBug_report = QAction(MainWindow)
        self.actionBug_report.setObjectName(u"actionBug_report")
        self.actionReport_vulnerability = QAction(MainWindow)
        self.actionReport_vulnerability.setObjectName(u"actionReport_vulnerability")
        self.actionDiscord = QAction(MainWindow)
        self.actionDiscord.setObjectName(u"actionDiscord")
        self.actionExtensions = QAction(MainWindow)
        self.actionExtensions.setObjectName(u"actionExtensions")
        self.actionShow_image_preview = QAction(MainWindow)
        self.actionShow_image_preview.setObjectName(u"actionShow_image_preview")
        self.actionShow_image_preview.setCheckable(True)
        self.actionImage_to_new_layer = QAction(MainWindow)
        self.actionImage_to_new_layer.setObjectName(u"actionImage_to_new_layer")
        self.actionImage_to_new_layer.setCheckable(True)
        self.actionAuto_export_images = QAction(MainWindow)
        self.actionAuto_export_images.setObjectName(u"actionAuto_export_images")
        self.actionAuto_export_images.setCheckable(True)
        self.actionImage_export_settings = QAction(MainWindow)
        self.actionImage_export_settings.setObjectName(u"actionImage_export_settings")
        self.actionCheck_for_latest_version_on_startup = QAction(MainWindow)
        self.actionCheck_for_latest_version_on_startup.setObjectName(u"actionCheck_for_latest_version_on_startup")
        self.actionCheck_for_latest_version_on_startup.setCheckable(True)
        self.actionModel_Merger = QAction(MainWindow)
        self.actionModel_Merger.setObjectName(u"actionModel_Merger")
        self.actionSaturation_Filter = QAction(MainWindow)
        self.actionSaturation_Filter.setObjectName(u"actionSaturation_Filter")
        self.actionColor_Balance_2 = QAction(MainWindow)
        self.actionColor_Balance_2.setObjectName(u"actionColor_Balance_2")
        self.actionRGB_Noise = QAction(MainWindow)
        self.actionRGB_Noise.setObjectName(u"actionRGB_Noise")
        self.actionGaussian_Blur_2 = QAction(MainWindow)
        self.actionGaussian_Blur_2.setObjectName(u"actionGaussian_Blur_2")
        self.actionBox_Blur_2 = QAction(MainWindow)
        self.actionBox_Blur_2.setObjectName(u"actionBox_Blur_2")
        self.actionRotate_90_clockwise = QAction(MainWindow)
        self.actionRotate_90_clockwise.setObjectName(u"actionRotate_90_clockwise")
        self.actionRotate_90_counter_clockwise = QAction(MainWindow)
        self.actionRotate_90_counter_clockwise.setObjectName(u"actionRotate_90_counter_clockwise")
        self.actionSave_prompt = QAction(MainWindow)
        self.actionSave_prompt.setObjectName(u"actionSave_prompt")
        self.actionShow_Active_Image_Area = QAction(MainWindow)
        self.actionShow_Active_Image_Area.setObjectName(u"actionShow_Active_Image_Area")
        self.actionShow_Active_Image_Area.setCheckable(True)
        self.actionImage_Interpolation = QAction(MainWindow)
        self.actionImage_Interpolation.setObjectName(u"actionImage_Interpolation")
        self.actionImage_interpolation = QAction(MainWindow)
        self.actionImage_interpolation.setObjectName(u"actionImage_interpolation")
        self.actionFilm = QAction(MainWindow)
        self.actionFilm.setObjectName(u"actionFilm")
        self.actionDeterministic_generation = QAction(MainWindow)
        self.actionDeterministic_generation.setObjectName(u"actionDeterministic_generation")
        self.actionDark_mode = QAction(MainWindow)
        self.actionDark_mode.setObjectName(u"actionDark_mode")
        self.actionDark_mode.setCheckable(True)
        self.actionConsole_window = QAction(MainWindow)
        self.actionConsole_window.setObjectName(u"actionConsole_window")
        self.actionPrompt_Browser = QAction(MainWindow)
        self.actionPrompt_Browser.setObjectName(u"actionPrompt_Browser")
        self.actionClear_all_prompts = QAction(MainWindow)
        self.actionClear_all_prompts.setObjectName(u"actionClear_all_prompts")
        self.actionUndo_2 = QAction(MainWindow)
        self.actionUndo_2.setObjectName(u"actionUndo_2")
        icon5 = QIcon()
        icon5.addFile(u"../../../../../../../../../../../../../../../../../../../.designer/src/icons/007-undo.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionUndo_2.setIcon(icon5)
        self.actionRedo_2 = QAction(MainWindow)
        self.actionRedo_2.setObjectName(u"actionRedo_2")
        icon6 = QIcon()
        icon6.addFile(u"../../../../../../../../../../../../../../../../../../../.designer/src/icons/008-redo.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionRedo_2.setIcon(icon6)
        self.actionCut = QAction(MainWindow)
        self.actionCut.setObjectName(u"actionCut")
        self.actionHalftone = QAction(MainWindow)
        self.actionHalftone.setObjectName(u"actionHalftone")
        self.actionQuick_Export = QAction(MainWindow)
        self.actionQuick_Export.setObjectName(u"actionQuick_Export")
        self.actionRegistration_error = QAction(MainWindow)
        self.actionRegistration_error.setObjectName(u"actionRegistration_error")
        self.actionHuggingface_Cache_manager = QAction(MainWindow)
        self.actionHuggingface_Cache_manager.setObjectName(u"actionHuggingface_Cache_manager")
        self.actionModel_Manager = QAction(MainWindow)
        self.actionModel_Manager.setObjectName(u"actionModel_Manager")
        self.actionModel_Manager_2 = QAction(MainWindow)
        self.actionModel_Manager_2.setObjectName(u"actionModel_Manager_2")
        self.actionControlNet = QAction(MainWindow)
        self.actionControlNet.setObjectName(u"actionControlNet")
        self.actionPrompt_Builder = QAction(MainWindow)
        self.actionPrompt_Builder.setObjectName(u"actionPrompt_Builder")
        self.actionEmbeddings = QAction(MainWindow)
        self.actionEmbeddings.setObjectName(u"actionEmbeddings")
        self.actionLoRA = QAction(MainWindow)
        self.actionLoRA.setObjectName(u"actionLoRA")
        self.actionPen = QAction(MainWindow)
        self.actionPen.setObjectName(u"actionPen")
        self.actionStableDiffusion = QAction(MainWindow)
        self.actionStableDiffusion.setObjectName(u"actionStableDiffusion")
        self.actionKandinsky = QAction(MainWindow)
        self.actionKandinsky.setObjectName(u"actionKandinsky")
        self.actionShap_E = QAction(MainWindow)
        self.actionShap_E.setObjectName(u"actionShap_E")
        self.actionRun_setup_wizard = QAction(MainWindow)
        self.actionRun_setup_wizard.setObjectName(u"actionRun_setup_wizard")
        self.actionBrowse_AI_Runner_Path = QAction(MainWindow)
        self.actionBrowse_AI_Runner_Path.setObjectName(u"actionBrowse_AI_Runner_Path")
        self.actionBrowse_Images_Path = QAction(MainWindow)
        self.actionBrowse_Images_Path.setObjectName(u"actionBrowse_Images_Path")
        self.actionBrowse_Images_Path_2 = QAction(MainWindow)
        self.actionBrowse_Images_Path_2.setObjectName(u"actionBrowse_Images_Path_2")
        self.actionBrowse_Gifs_Path = QAction(MainWindow)
        self.actionBrowse_Gifs_Path.setObjectName(u"actionBrowse_Gifs_Path")
        self.actionTxt2img_Img2img_Models = QAction(MainWindow)
        self.actionTxt2img_Img2img_Models.setObjectName(u"actionTxt2img_Img2img_Models")
        self.actionInpaint_Outpaint_Models = QAction(MainWindow)
        self.actionInpaint_Outpaint_Models.setObjectName(u"actionInpaint_Outpaint_Models")
        self.actionActive_Grid = QAction(MainWindow)
        self.actionActive_Grid.setObjectName(u"actionActive_Grid")
        self.actionDeterministic_Batches = QAction(MainWindow)
        self.actionDeterministic_Batches.setObjectName(u"actionDeterministic_Batches")
        self.actionStandard_Batches = QAction(MainWindow)
        self.actionStandard_Batches.setObjectName(u"actionStandard_Batches")
        self.actionLLM_beta = QAction(MainWindow)
        self.actionLLM_beta.setObjectName(u"actionLLM_beta")
        self.actionReset_Settings_2 = QAction(MainWindow)
        self.actionReset_Settings_2.setObjectName(u"actionReset_Settings_2")
        self.actionImage_Browser = QAction(MainWindow)
        self.actionImage_Browser.setObjectName(u"actionImage_Browser")
        self.actionModel_Manager_3 = QAction(MainWindow)
        self.actionModel_Manager_3.setObjectName(u"actionModel_Manager_3")
        self.actionImport_input_image = QAction(MainWindow)
        self.actionImport_input_image.setObjectName(u"actionImport_input_image")
        self.actionExport_input_image = QAction(MainWindow)
        self.actionExport_input_image.setObjectName(u"actionExport_input_image")
        self.actionImport_2 = QAction(MainWindow)
        self.actionImport_2.setObjectName(u"actionImport_2")
        self.actionExport_image = QAction(MainWindow)
        self.actionExport_image.setObjectName(u"actionExport_image")
        self.actionImport_Image = QAction(MainWindow)
        self.actionImport_Image.setObjectName(u"actionImport_Image")
        self.actionExport_Image = QAction(MainWindow)
        self.actionExport_Image.setObjectName(u"actionExport_Image")
        self.actionImport_3 = QAction(MainWindow)
        self.actionImport_3.setObjectName(u"actionImport_3")
        self.actionExport_2 = QAction(MainWindow)
        self.actionExport_2.setObjectName(u"actionExport_2")
        self.controlnet_import = QAction(MainWindow)
        self.controlnet_import.setObjectName(u"controlnet_import")
        self.controlnet_export = QAction(MainWindow)
        self.controlnet_export.setObjectName(u"controlnet_export")
        self.drawingpad_import = QAction(MainWindow)
        self.drawingpad_import.setObjectName(u"drawingpad_import")
        self.drawingpad_export = QAction(MainWindow)
        self.drawingpad_export.setObjectName(u"drawingpad_export")
        self.actionGenerate_while_drawing = QAction(MainWindow)
        self.actionGenerate_while_drawing.setObjectName(u"actionGenerate_while_drawing")
        self.actionGenerate_while_drawing.setCheckable(True)
        self.actionOverlay_input_image = QAction(MainWindow)
        self.actionOverlay_input_image.setObjectName(u"actionOverlay_input_image")
        self.actionOverlay_input_image.setCheckable(True)
        self.enable_controlnet = QAction(MainWindow)
        self.enable_controlnet.setObjectName(u"enable_controlnet")
        self.enable_controlnet.setCheckable(True)
        self.actionUnload_LLm = QAction(MainWindow)
        self.actionUnload_LLm.setObjectName(u"actionUnload_LLm")
        self.actionUnload_Image_model = QAction(MainWindow)
        self.actionUnload_Image_model.setObjectName(u"actionUnload_Image_model")
        self.actionClear_Memory = QAction(MainWindow)
        self.actionClear_Memory.setObjectName(u"actionClear_Memory")
        self.actionSafety_Checker = QAction(MainWindow)
        self.actionSafety_Checker.setObjectName(u"actionSafety_Checker")
        self.actionSafety_Checker.setCheckable(True)
        self.actionSafety_Checker.setChecked(False)
        self.outpaint_import = QAction(MainWindow)
        self.outpaint_import.setObjectName(u"outpaint_import")
        self.outpaint_export = QAction(MainWindow)
        self.outpaint_export.setObjectName(u"outpaint_export")
        self.outpaint_enabled = QAction(MainWindow)
        self.outpaint_enabled.setObjectName(u"outpaint_enabled")
        self.outpaint_enabled.setCheckable(True)
        self.actionModel_Manager_4 = QAction(MainWindow)
        self.actionModel_Manager_4.setObjectName(u"actionModel_Manager_4")
        self.actionRun_setup_wizard_2 = QAction(MainWindow)
        self.actionRun_setup_wizard_2.setObjectName(u"actionRun_setup_wizard_2")
        self.actionStats = QAction(MainWindow)
        self.actionStats.setObjectName(u"actionStats")
        self.actionSettings = QAction(MainWindow)
        self.actionSettings.setObjectName(u"actionSettings")
        icon7 = QIcon(QIcon.fromTheme(u"preferences-system"))
        self.actionSettings.setIcon(icon7)
        self.actionToggle_LLM = QAction(MainWindow)
        self.actionToggle_LLM.setObjectName(u"actionToggle_LLM")
        self.actionToggle_LLM.setCheckable(True)
        self.actionToggle_LLM.setChecked(False)
        icon8 = QIcon()
        iconThemeName = u"applications-internet"
        if QIcon.hasThemeIcon(iconThemeName):
            icon8 = QIcon.fromTheme(iconThemeName)
        else:
            icon8.addFile(u"../../../../../../../.designer/backup/applications-internet", QSize(), QIcon.Normal, QIcon.On)

        self.actionToggle_LLM.setIcon(icon8)
        self.actionToggle_Text_to_Speech = QAction(MainWindow)
        self.actionToggle_Text_to_Speech.setObjectName(u"actionToggle_Text_to_Speech")
        self.actionToggle_Text_to_Speech.setCheckable(True)
        icon9 = QIcon(QIcon.fromTheme(u"audio-volume-high"))
        self.actionToggle_Text_to_Speech.setIcon(icon9)
        self.actionToggle_Speech_to_Text = QAction(MainWindow)
        self.actionToggle_Speech_to_Text.setObjectName(u"actionToggle_Speech_to_Text")
        self.actionToggle_Speech_to_Text.setCheckable(True)
        icon10 = QIcon()
        iconThemeName = u"audio-input-microphone"
        if QIcon.hasThemeIcon(iconThemeName):
            icon10 = QIcon.fromTheme(iconThemeName)
        else:
            icon10.addFile(u"../../../../../../../.designer/backup/audio-input-microphone", QSize(), QIcon.Normal, QIcon.On)

        self.actionToggle_Speech_to_Text.setIcon(icon10)
        self.actionToggle_Stable_Diffusion = QAction(MainWindow)
        self.actionToggle_Stable_Diffusion.setObjectName(u"actionToggle_Stable_Diffusion")
        self.actionToggle_Stable_Diffusion.setCheckable(True)
        icon11 = QIcon(QIcon.fromTheme(u"applications-graphics"))
        self.actionToggle_Stable_Diffusion.setIcon(icon11)
        self.actionToggle_Controlnet = QAction(MainWindow)
        self.actionToggle_Controlnet.setObjectName(u"actionToggle_Controlnet")
        self.actionToggle_Controlnet.setCheckable(True)
        self.actionToggle_Controlnet.setChecked(False)
        icon12 = QIcon(QIcon.fromTheme(u"insert-image"))
        self.actionToggle_Controlnet.setIcon(icon12)
        self.actionExport_3 = QAction(MainWindow)
        self.actionExport_3.setObjectName(u"actionExport_3")
        icon13 = QIcon(QIcon.fromTheme(u"document-save"))
        self.actionExport_3.setIcon(icon13)
        self.actionToggle_Active_Grid_Area = QAction(MainWindow)
        self.actionToggle_Active_Grid_Area.setObjectName(u"actionToggle_Active_Grid_Area")
        self.actionToggle_Active_Grid_Area.setCheckable(True)
        icon14 = QIcon()
        icon14.addFile(u":/icons/light/object-selected-icon.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionToggle_Active_Grid_Area.setIcon(icon14)
        self.actionToggle_Selection = QAction(MainWindow)
        self.actionToggle_Selection.setObjectName(u"actionToggle_Selection")
        self.actionToggle_Selection.setCheckable(True)
        icon15 = QIcon()
        icon15.addFile(u":/icons/light/select-svgrepo-com.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionToggle_Selection.setIcon(icon15)
        self.actionToggle_Brush = QAction(MainWindow)
        self.actionToggle_Brush.setObjectName(u"actionToggle_Brush")
        self.actionToggle_Brush.setCheckable(True)
        icon16 = QIcon()
        icon16.addFile(u":/icons/light/pencil-icon.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionToggle_Brush.setIcon(icon16)
        self.actionToggle_Grid = QAction(MainWindow)
        self.actionToggle_Grid.setObjectName(u"actionToggle_Grid")
        self.actionToggle_Grid.setCheckable(True)
        icon17 = QIcon()
        icon17.addFile(u":/icons/light/frame-grid-icon.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionToggle_Grid.setIcon(icon17)
        self.actionRecenter = QAction(MainWindow)
        self.actionRecenter.setObjectName(u"actionRecenter")
        icon18 = QIcon()
        icon18.addFile(u":/icons/light/circle-center-icon.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionRecenter.setIcon(icon18)
        self.actionToggle_Eraser = QAction(MainWindow)
        self.actionToggle_Eraser.setObjectName(u"actionToggle_Eraser")
        self.actionToggle_Eraser.setCheckable(True)
        icon19 = QIcon()
        icon19.addFile(u":/icons/light/eraser-icon.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionToggle_Eraser.setIcon(icon19)
        self.actionMask_toggle = QAction(MainWindow)
        self.actionMask_toggle.setObjectName(u"actionMask_toggle")
        self.actionMask_toggle.setCheckable(True)
        icon20 = QIcon()
        icon20.addFile(u":/icons/light/layer-icon.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionMask_toggle.setIcon(icon20)
        self.actionMask_toggle.setMenuRole(QAction.MenuRole.NoRole)
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.centralwidget.setEnabled(True)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setMinimumSize(QSize(0, 0))
        self.centralwidget.setLayoutDirection(Qt.LayoutDirection.LeftToRight)
        self.gridLayout_3 = QGridLayout(self.centralwidget)
        self.gridLayout_3.setSpacing(0)
        self.gridLayout_3.setObjectName(u"gridLayout_3")
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.mode_tab_widget = QWidget(self.centralwidget)
        self.mode_tab_widget.setObjectName(u"mode_tab_widget")
        self.mode_tab_widget.setAutoFillBackground(False)
        self.mode_tab_widget.setStyleSheet(u"QTabWidget#mode_tab_widget::pane { border: 0; background: transparent; }")
        self.gridLayout = QGridLayout(self.mode_tab_widget)
        self.gridLayout.setSpacing(0)
        self.gridLayout.setObjectName(u"gridLayout")
        self.gridLayout.setContentsMargins(0, 1, 0, 0)
        self.content_splitter = QSplitter(self.mode_tab_widget)
        self.content_splitter.setObjectName(u"content_splitter")
        self.content_splitter.setOrientation(Qt.Orientation.Horizontal)
        self.generator_widget = GeneratorForm(self.content_splitter)
        self.generator_widget.setObjectName(u"generator_widget")
        self.content_splitter.addWidget(self.generator_widget)
        self.canvas_widget = QWidget(self.content_splitter)
        self.canvas_widget.setObjectName(u"canvas_widget")
        self.canvas_widget.setMinimumSize(QSize(0, 0))
        self.gridLayout_2 = QGridLayout(self.canvas_widget)
        self.gridLayout_2.setSpacing(0)
        self.gridLayout_2.setObjectName(u"gridLayout_2")
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.canvas_widget_2 = CanvasWidget(self.canvas_widget)
        self.canvas_widget_2.setObjectName(u"canvas_widget_2")
        sizePolicy1 = QSizePolicy(QSizePolicy.Policy.Ignored, QSizePolicy.Policy.MinimumExpanding)
        sizePolicy1.setHorizontalStretch(0)
        sizePolicy1.setVerticalStretch(0)
        sizePolicy1.setHeightForWidth(self.canvas_widget_2.sizePolicy().hasHeightForWidth())
        self.canvas_widget_2.setSizePolicy(sizePolicy1)
        self.canvas_widget_2.setMinimumSize(QSize(0, 0))
        self.canvas_widget_2.setMaximumSize(QSize(16777215, 16777215))
        self.canvas_widget_2.setCursor(QCursor(Qt.ArrowCursor))
        self.canvas_widget_2.setAcceptDrops(True)

        self.gridLayout_2.addWidget(self.canvas_widget_2, 0, 0, 1, 1)

        self.content_splitter.addWidget(self.canvas_widget)
        self.panel_container = QWidget(self.content_splitter)
        self.panel_container.setObjectName(u"panel_container")
        self.verticalLayout_2 = QVBoxLayout(self.panel_container)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName(u"verticalLayout_2")
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.tool_tab_widget = ToolTabWidget(self.panel_container)
        self.tool_tab_widget.setObjectName(u"tool_tab_widget")

        self.verticalLayout_2.addWidget(self.tool_tab_widget)

        self.content_splitter.addWidget(self.panel_container)

        self.gridLayout.addWidget(self.content_splitter, 0, 0, 1, 1)


        self.gridLayout_3.addWidget(self.mode_tab_widget, 0, 0, 1, 1)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 829, 22))
        font1 = QFont()
        font1.setPointSize(11)
        self.menubar.setFont(font1)
        self.menuFile = QMenu(self.menubar)
        self.menuFile.setObjectName(u"menuFile")
        self.menuFile.setTearOffEnabled(False)
        self.menuFile.setSeparatorsCollapsible(False)
        self.menuEdit = QMenu(self.menubar)
        self.menuEdit.setObjectName(u"menuEdit")
        self.menuFilters = QMenu(self.menubar)
        self.menuFilters.setObjectName(u"menuFilters")
        self.menuAbout = QMenu(self.menubar)
        self.menuAbout.setObjectName(u"menuAbout")
        self.menuAbout.setTearOffEnabled(False)
        self.menuImage = QMenu(self.menubar)
        self.menuImage.setObjectName(u"menuImage")
        self.menuView = QMenu(self.menubar)
        self.menuView.setObjectName(u"menuView")
        self.menuTools = QMenu(self.menubar)
        self.menuTools.setObjectName(u"menuTools")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName(u"statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QToolBar(MainWindow)
        self.toolBar.setObjectName(u"toolBar")
        self.toolBar.setMovable(True)
        self.toolBar.setIconSize(QSize(18, 18))
        self.toolBar.setFloatable(False)
        MainWindow.addToolBar(Qt.ToolBarArea.TopToolBarArea, self.toolBar)
        self.model_toolbar = QToolBar(MainWindow)
        self.model_toolbar.setObjectName(u"model_toolbar")
        self.model_toolbar.setLayoutDirection(Qt.LayoutDirection.RightToLeft)
        self.model_toolbar.setMovable(True)
        self.model_toolbar.setOrientation(Qt.Orientation.Horizontal)
        self.model_toolbar.setIconSize(QSize(18, 18))
        self.model_toolbar.setFloatable(False)
        MainWindow.addToolBar(Qt.ToolBarArea.BottomToolBarArea, self.model_toolbar)

        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuImage.menuAction())
        self.menubar.addAction(self.menuFilters.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionImport)
        self.menuFile.addAction(self.actionExport_3)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionReset_Settings_2)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionQuit)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionCut)
        self.menuEdit.addAction(self.actionCopy)
        self.menuEdit.addAction(self.actionPaste)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionRotate_90_clockwise)
        self.menuEdit.addAction(self.actionRotate_90_counter_clockwise)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionClear_all_prompts)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionSettings)
        self.menuFilters.addSeparator()
        self.menuAbout.addAction(self.actionAbout)
        self.menuAbout.addAction(self.actionBug_report)
        self.menuAbout.addAction(self.actionReport_vulnerability)
        self.menuImage.addSeparator()
        self.menuImage.addSeparator()
        self.menuImage.addAction(self.actionToggle_Active_Grid_Area)
        self.menuImage.addAction(self.actionToggle_Selection)
        self.menuImage.addAction(self.actionToggle_Brush)
        self.menuImage.addAction(self.actionToggle_Eraser)
        self.menuImage.addAction(self.actionToggle_Grid)
        self.menuView.addAction(self.actionPrompt_Browser)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionBrowse_AI_Runner_Path)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionBrowse_Images_Path_2)
        self.menuView.addSeparator()
        self.menuTools.addAction(self.actionSafety_Checker)
        self.menuTools.addAction(self.actionToggle_Stable_Diffusion)
        self.menuTools.addAction(self.actionToggle_Controlnet)
        self.menuTools.addSeparator()
        self.menuTools.addAction(self.actionToggle_LLM)
        self.menuTools.addAction(self.actionToggle_Text_to_Speech)
        self.menuTools.addAction(self.actionToggle_Speech_to_Text)
        self.menuTools.addSeparator()
        self.menuTools.addAction(self.actionStats)
        self.menuTools.addSeparator()
        self.menuTools.addAction(self.actionRun_setup_wizard_2)
        self.toolBar.addAction(self.actionNew)
        self.toolBar.addAction(self.actionImport)
        self.toolBar.addAction(self.actionExport_3)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionToggle_Active_Grid_Area)
        self.toolBar.addAction(self.actionToggle_Brush)
        self.toolBar.addAction(self.actionToggle_Eraser)
        self.toolBar.addAction(self.actionToggle_Grid)
        self.toolBar.addAction(self.actionMask_toggle)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionUndo)
        self.toolBar.addAction(self.actionRedo)
        self.model_toolbar.addAction(self.actionSettings)
        self.model_toolbar.addSeparator()
        self.model_toolbar.addAction(self.actionToggle_Speech_to_Text)
        self.model_toolbar.addAction(self.actionToggle_Text_to_Speech)
        self.model_toolbar.addAction(self.actionToggle_LLM)
        self.model_toolbar.addSeparator()
        self.model_toolbar.addAction(self.actionToggle_Controlnet)
        self.model_toolbar.addAction(self.actionToggle_Stable_Diffusion)

        self.retranslateUi(MainWindow)
        self.actionAbout.triggered.connect(MainWindow.action_show_about_window)
        self.actionExport.triggered.connect(MainWindow.action_export_image_triggered)
        self.actionNew.triggered.connect(MainWindow.action_new_document_triggered)
        self.actionImport.triggered.connect(MainWindow.action_import_image_triggered)
        self.actionQuit.triggered.connect(MainWindow.action_quit_triggered)
        self.actionPaste.triggered.connect(MainWindow.action_paste_image_triggered)
        self.actionCopy.triggered.connect(MainWindow.action_copy_image_triggered)
        self.actionCut.triggered.connect(MainWindow.action_cut_image_triggered)
        self.actionRotate_90_clockwise.triggered.connect(MainWindow.action_rotate_90_clockwise_triggered)
        self.actionRotate_90_counter_clockwise.triggered.connect(MainWindow.action_rotate_90_counterclockwise_triggered)
        self.actionPrompt_Browser.triggered.connect(MainWindow.action_show_prompt_browser_triggered)
        self.actionClear_all_prompts.triggered.connect(MainWindow.action_clear_all_prompts_triggered)
        self.actionBrowse_AI_Runner_Path.triggered.connect(MainWindow.action_triggered_browse_ai_runner_path)
        self.actionBrowse_Images_Path_2.triggered.connect(MainWindow.action_show_images_path)
        self.actionTxt2img_Img2img_Models.triggered.connect(MainWindow.action_show_model_path_txt2img)
        self.actionInpaint_Outpaint_Models.triggered.connect(MainWindow.action_show_model_path_inpaint)
        self.actionModel_Manager_2.triggered.connect(MainWindow.action_show_model_manager)
        self.actionBug_report.triggered.connect(MainWindow.action_open_bug_report)
        self.actionDiscord.triggered.connect(MainWindow.action_open_discord)
        self.actionReport_vulnerability.triggered.connect(MainWindow.action_open_vulnerability_report)
        self.actionReset_Settings_2.triggered.connect(MainWindow.action_reset_settings)
        self.actionModel_Manager_3.triggered.connect(MainWindow.action_show_model_manager)
        self.drawingpad_import.triggered.connect(MainWindow.import_drawingpad_image)
        self.drawingpad_export.triggered.connect(MainWindow.export_drawingpad_image)
        self.controlnet_import.triggered.connect(MainWindow.import_controlnet_image)
        self.controlnet_export.triggered.connect(MainWindow.export_controlnet_image)
        self.enable_controlnet.toggled.connect(MainWindow.action_controlnet_toggled)
        self.actionSafety_Checker.toggled.connect(MainWindow.action_toggle_nsfw_filter_triggered)
        self.outpaint_export.triggered.connect(MainWindow.action_outpaint_export)
        self.outpaint_enabled.toggled.connect(MainWindow.action_outpaint_toggled)
        self.outpaint_import.triggered.connect(MainWindow.action_outpaint_import)
        self.actionRun_setup_wizard_2.triggered.connect(MainWindow.action_run_setup_wizard_clicked)
        self.actionStats.triggered.connect(MainWindow.action_stats_triggered)
        self.actionSettings.triggered.connect(MainWindow.action_show_settings)
        self.actionToggle_Controlnet.toggled.connect(MainWindow.action_controlnet_toggled)
        self.actionToggle_Stable_Diffusion.toggled.connect(MainWindow.action_image_generator_toggled)
        self.actionToggle_Text_to_Speech.toggled.connect(MainWindow.tts_button_toggled)
        self.actionToggle_Speech_to_Text.toggled.connect(MainWindow.v2t_button_toggled)
        self.actionToggle_Grid.toggled.connect(MainWindow.action_toggle_grid)
        self.actionToggle_Active_Grid_Area.toggled.connect(MainWindow.action_toggle_active_grid_area)
        self.actionToggle_Selection.toggled.connect(MainWindow.action_toggle_select)
        self.actionToggle_Brush.toggled.connect(MainWindow.action_toggle_brush)
        self.actionToggle_Eraser.toggled.connect(MainWindow.action_toggle_eraser)
        self.actionRecenter.triggered.connect(MainWindow.action_center_clicked)
        self.actionToggle_LLM.toggled.connect(MainWindow.action_toggle_llm)
        self.actionExport_3.triggered.connect(MainWindow.action_export_image_triggered)
        self.actionMask_toggle.toggled.connect(MainWindow.action_toggle_mask_layer)
        self.actionUndo.triggered.connect(MainWindow.action_undo_triggered)
        self.actionRedo.triggered.connect(MainWindow.action_redo_triggered)

        QMetaObject.connectSlotsByName(MainWindow)
    # setupUi

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"AI Runner", None))
        self.actionNew.setText(QCoreApplication.translate("MainWindow", u"New", None))
#if QT_CONFIG(shortcut)
        self.actionNew.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+N", None))
#endif // QT_CONFIG(shortcut)
        self.actionImport.setText(QCoreApplication.translate("MainWindow", u"Import image", None))
#if QT_CONFIG(shortcut)
        self.actionImport.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+I", None))
#endif // QT_CONFIG(shortcut)
        self.actionExport.setText(QCoreApplication.translate("MainWindow", u"Export image", None))
#if QT_CONFIG(shortcut)
        self.actionExport.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+E", None))
#endif // QT_CONFIG(shortcut)
        self.actionCopy.setText(QCoreApplication.translate("MainWindow", u"Copy", None))
#if QT_CONFIG(shortcut)
        self.actionCopy.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+C", None))
#endif // QT_CONFIG(shortcut)
        self.actionPaste.setText(QCoreApplication.translate("MainWindow", u"Paste", None))
#if QT_CONFIG(shortcut)
        self.actionPaste.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+V", None))
#endif // QT_CONFIG(shortcut)
        self.actionUndo.setText(QCoreApplication.translate("MainWindow", u"Undo", None))
#if QT_CONFIG(tooltip)
        self.actionUndo.setToolTip(QCoreApplication.translate("MainWindow", u"Undo", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.actionUndo.setWhatsThis("")
#endif // QT_CONFIG(whatsthis)
#if QT_CONFIG(shortcut)
        self.actionUndo.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Z", None))
#endif // QT_CONFIG(shortcut)
        self.actionRedo.setText(QCoreApplication.translate("MainWindow", u"Redo", None))
#if QT_CONFIG(shortcut)
        self.actionRedo.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Y", None))
#endif // QT_CONFIG(shortcut)
        self.actionGrid.setText(QCoreApplication.translate("MainWindow", u"Grid", None))
#if QT_CONFIG(tooltip)
        self.actionGrid.setToolTip(QCoreApplication.translate("MainWindow", u"Grid settings", None))
#endif // QT_CONFIG(tooltip)
        self.actionPreferences.setText(QCoreApplication.translate("MainWindow", u"Path Preferences", None))
#if QT_CONFIG(tooltip)
        self.actionPreferences.setToolTip(QCoreApplication.translate("MainWindow", u"Modify model path and more", None))
#endif // QT_CONFIG(tooltip)
        self.actionCanvas_color.setText(QCoreApplication.translate("MainWindow", u"Canvas color", None))
#if QT_CONFIG(tooltip)
        self.actionCanvas_color.setToolTip(QCoreApplication.translate("MainWindow", u"Change the color of the canvas", None))
#endif // QT_CONFIG(tooltip)
        self.actionReset_Settings.setText(QCoreApplication.translate("MainWindow", u"Reset Settings to Default", None))
#if QT_CONFIG(tooltip)
        self.actionReset_Settings.setToolTip(QCoreApplication.translate("MainWindow", u"Reset all settings to default", None))
#endif // QT_CONFIG(tooltip)
        self.actionResize_on_Paste.setText(QCoreApplication.translate("MainWindow", u"Resize on Import", None))
#if QT_CONFIG(tooltip)
        self.actionResize_on_Paste.setToolTip(QCoreApplication.translate("MainWindow", u"Resize the image to active grid area when importing", None))
#endif // QT_CONFIG(tooltip)
        self.actionMemory.setText(QCoreApplication.translate("MainWindow", u"Memory", None))
        self.actionAbout.setText(QCoreApplication.translate("MainWindow", u"About", None))
        self.actionCheck_for_updates.setText(QCoreApplication.translate("MainWindow", u"Check for updates", None))
        self.actionOpen.setText(QCoreApplication.translate("MainWindow", u"Open", None))
        self.actionView.setText(QCoreApplication.translate("MainWindow", u"View", None))
        self.actionAdvanced.setText(QCoreApplication.translate("MainWindow", u"Memory Preferences", None))
#if QT_CONFIG(tooltip)
        self.actionAdvanced.setToolTip(QCoreApplication.translate("MainWindow", u"Change memory settings", None))
#endif // QT_CONFIG(tooltip)
        self.actionGaussian_Blur.setText(QCoreApplication.translate("MainWindow", u"Gaussian Blur", None))
        self.actionBox_Blur.setText(QCoreApplication.translate("MainWindow", u"Box Blur", None))
        self.actionUnsharp_Mask.setText(QCoreApplication.translate("MainWindow", u"Unsharp Mask", None))
        self.actionPixel_Art.setText(QCoreApplication.translate("MainWindow", u"Pixel Art", None))
        self.actionInvert.setText(QCoreApplication.translate("MainWindow", u"Invert", None))
#if QT_CONFIG(shortcut)
        self.actionInvert.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+I", None))
#endif // QT_CONFIG(shortcut)
        self.actionSaturation.setText(QCoreApplication.translate("MainWindow", u"Saturation", None))
        self.actionColor_Balance.setText(QCoreApplication.translate("MainWindow", u"Color Balance", None))
        self.actionSave.setText(QCoreApplication.translate("MainWindow", u"Save", None))
#if QT_CONFIG(shortcut)
        self.actionSave.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+S", None))
#endif // QT_CONFIG(shortcut)
        self.actionLoad.setText(QCoreApplication.translate("MainWindow", u"Open", None))
#if QT_CONFIG(shortcut)
        self.actionLoad.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+O", None))
#endif // QT_CONFIG(shortcut)
        self.actionQuit.setText(QCoreApplication.translate("MainWindow", u"Quit", None))
#if QT_CONFIG(shortcut)
        self.actionQuit.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Q", None))
#endif // QT_CONFIG(shortcut)
        self.actionPixel_Art_2.setText(QCoreApplication.translate("MainWindow", u"Pixel Art", None))
        self.actionBug_report.setText(QCoreApplication.translate("MainWindow", u"Bug report", None))
        self.actionReport_vulnerability.setText(QCoreApplication.translate("MainWindow", u"Report vulnerability", None))
        self.actionDiscord.setText(QCoreApplication.translate("MainWindow", u"Discord", None))
        self.actionExtensions.setText(QCoreApplication.translate("MainWindow", u"Extensions", None))
#if QT_CONFIG(tooltip)
        self.actionExtensions.setToolTip(QCoreApplication.translate("MainWindow", u"Install, update and delete extensions", None))
#endif // QT_CONFIG(tooltip)
        self.actionShow_image_preview.setText(QCoreApplication.translate("MainWindow", u"Show image preview", None))
        self.actionImage_to_new_layer.setText(QCoreApplication.translate("MainWindow", u"Image to new layer", None))
#if QT_CONFIG(tooltip)
        self.actionImage_to_new_layer.setToolTip(QCoreApplication.translate("MainWindow", u"Send generated images to new layer", None))
#endif // QT_CONFIG(tooltip)
        self.actionAuto_export_images.setText(QCoreApplication.translate("MainWindow", u"Auto export images", None))
#if QT_CONFIG(tooltip)
        self.actionAuto_export_images.setToolTip(QCoreApplication.translate("MainWindow", u"Automatically export newly generated images to a folder", None))
#endif // QT_CONFIG(tooltip)
        self.actionImage_export_settings.setText(QCoreApplication.translate("MainWindow", u"Import / export preferences", None))
        self.actionCheck_for_latest_version_on_startup.setText(QCoreApplication.translate("MainWindow", u"Check for latest version on startup", None))
        self.actionModel_Merger.setText(QCoreApplication.translate("MainWindow", u"Model Merger", None))
        self.actionSaturation_Filter.setText(QCoreApplication.translate("MainWindow", u"Saturation", None))
        self.actionColor_Balance_2.setText(QCoreApplication.translate("MainWindow", u"Color Balance", None))
        self.actionRGB_Noise.setText(QCoreApplication.translate("MainWindow", u"RGB Noise", None))
        self.actionGaussian_Blur_2.setText(QCoreApplication.translate("MainWindow", u"Gaussian Blur", None))
        self.actionBox_Blur_2.setText(QCoreApplication.translate("MainWindow", u"Box Blur", None))
        self.actionRotate_90_clockwise.setText(QCoreApplication.translate("MainWindow", u"Rotate 90\u00b0 clockwise", None))
#if QT_CONFIG(shortcut)
        self.actionRotate_90_clockwise.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+R", None))
#endif // QT_CONFIG(shortcut)
        self.actionRotate_90_counter_clockwise.setText(QCoreApplication.translate("MainWindow", u"Rotate 90\u00b0 counter clockwise", None))
#if QT_CONFIG(shortcut)
        self.actionRotate_90_counter_clockwise.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+R", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave_prompt.setText(QCoreApplication.translate("MainWindow", u"Save prompt", None))
        self.actionShow_Active_Image_Area.setText(QCoreApplication.translate("MainWindow", u"Show Active Image Area", None))
        self.actionImage_Interpolation.setText(QCoreApplication.translate("MainWindow", u"Image Interpolation", None))
        self.actionImage_interpolation.setText(QCoreApplication.translate("MainWindow", u"Image Interpolation", None))
        self.actionFilm.setText(QCoreApplication.translate("MainWindow", u"Film", None))
#if QT_CONFIG(shortcut)
        self.actionFilm.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+F", None))
#endif // QT_CONFIG(shortcut)
        self.actionDeterministic_generation.setText(QCoreApplication.translate("MainWindow", u"Deterministic generator", None))
        self.actionDark_mode.setText(QCoreApplication.translate("MainWindow", u"Dark mode", None))
        self.actionConsole_window.setText(QCoreApplication.translate("MainWindow", u"Console window", None))
        self.actionPrompt_Browser.setText(QCoreApplication.translate("MainWindow", u"Prompt browser", None))
        self.actionClear_all_prompts.setText(QCoreApplication.translate("MainWindow", u"Clear all prompts", None))
#if QT_CONFIG(tooltip)
        self.actionClear_all_prompts.setToolTip(QCoreApplication.translate("MainWindow", u"Remove text from all prompts and negative prompts", None))
#endif // QT_CONFIG(tooltip)
        self.actionUndo_2.setText(QCoreApplication.translate("MainWindow", u"Undo", None))
#if QT_CONFIG(shortcut)
        self.actionUndo_2.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Z", None))
#endif // QT_CONFIG(shortcut)
        self.actionRedo_2.setText(QCoreApplication.translate("MainWindow", u"Redo", None))
#if QT_CONFIG(shortcut)
        self.actionRedo_2.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Y", None))
#endif // QT_CONFIG(shortcut)
        self.actionCut.setText(QCoreApplication.translate("MainWindow", u"Cut", None))
#if QT_CONFIG(shortcut)
        self.actionCut.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+X", None))
#endif // QT_CONFIG(shortcut)
        self.actionHalftone.setText(QCoreApplication.translate("MainWindow", u"Halftone", None))
        self.actionQuick_Export.setText(QCoreApplication.translate("MainWindow", u"Fast Export", None))
#if QT_CONFIG(shortcut)
        self.actionQuick_Export.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+E", None))
#endif // QT_CONFIG(shortcut)
        self.actionRegistration_error.setText(QCoreApplication.translate("MainWindow", u"Registration error", None))
        self.actionHuggingface_Cache_manager.setText(QCoreApplication.translate("MainWindow", u"Browse Huggingface Cache", None))
        self.actionModel_Manager.setText(QCoreApplication.translate("MainWindow", u"Model Manager", None))
        self.actionModel_Manager_2.setText(QCoreApplication.translate("MainWindow", u"Model Manager", None))
        self.actionControlNet.setText(QCoreApplication.translate("MainWindow", u"ControlNet", None))
        self.actionPrompt_Builder.setText(QCoreApplication.translate("MainWindow", u"Prompt Builder", None))
        self.actionEmbeddings.setText(QCoreApplication.translate("MainWindow", u"Embeddings", None))
        self.actionLoRA.setText(QCoreApplication.translate("MainWindow", u"LoRA", None))
        self.actionPen.setText(QCoreApplication.translate("MainWindow", u"Pen", None))
        self.actionStableDiffusion.setText(QCoreApplication.translate("MainWindow", u"Stable Diffusion", None))
        self.actionKandinsky.setText(QCoreApplication.translate("MainWindow", u"Kandinsky", None))
        self.actionShap_E.setText(QCoreApplication.translate("MainWindow", u"Shap-E", None))
        self.actionRun_setup_wizard.setText(QCoreApplication.translate("MainWindow", u"Run setup wizard", None))
        self.actionBrowse_AI_Runner_Path.setText(QCoreApplication.translate("MainWindow", u"Browse AI Runner Path", None))
        self.actionBrowse_Images_Path.setText(QCoreApplication.translate("MainWindow", u"Browse Images Path", None))
        self.actionBrowse_Images_Path_2.setText(QCoreApplication.translate("MainWindow", u"Browse Images", None))
        self.actionBrowse_Gifs_Path.setText(QCoreApplication.translate("MainWindow", u"Browse GIFs", None))
        self.actionTxt2img_Img2img_Models.setText(QCoreApplication.translate("MainWindow", u"Txt2img / Img2img", None))
        self.actionInpaint_Outpaint_Models.setText(QCoreApplication.translate("MainWindow", u"Inpaint / Outpaint", None))
        self.actionActive_Grid.setText(QCoreApplication.translate("MainWindow", u"Active Grid", None))
        self.actionDeterministic_Batches.setText(QCoreApplication.translate("MainWindow", u"Deterministic Batches", None))
        self.actionStandard_Batches.setText(QCoreApplication.translate("MainWindow", u"Standard Batches", None))
        self.actionLLM_beta.setText(QCoreApplication.translate("MainWindow", u"LLM (beta)", None))
        self.actionReset_Settings_2.setText(QCoreApplication.translate("MainWindow", u"Reset Settings", None))
        self.actionImage_Browser.setText(QCoreApplication.translate("MainWindow", u"Image Browser", None))
        self.actionModel_Manager_3.setText(QCoreApplication.translate("MainWindow", u"Model Manager", None))
        self.actionImport_input_image.setText(QCoreApplication.translate("MainWindow", u"Import input image", None))
        self.actionExport_input_image.setText(QCoreApplication.translate("MainWindow", u"Export input image", None))
        self.actionImport_2.setText(QCoreApplication.translate("MainWindow", u"Import image", None))
        self.actionExport_image.setText(QCoreApplication.translate("MainWindow", u"Export image", None))
        self.actionImport_Image.setText(QCoreApplication.translate("MainWindow", u"Import Image", None))
        self.actionExport_Image.setText(QCoreApplication.translate("MainWindow", u"Export Image", None))
        self.actionImport_3.setText(QCoreApplication.translate("MainWindow", u"Import", None))
        self.actionExport_2.setText(QCoreApplication.translate("MainWindow", u"Export", None))
        self.controlnet_import.setText(QCoreApplication.translate("MainWindow", u"Import Image", None))
        self.controlnet_export.setText(QCoreApplication.translate("MainWindow", u"Export Image", None))
        self.drawingpad_import.setText(QCoreApplication.translate("MainWindow", u"Import Image", None))
        self.drawingpad_export.setText(QCoreApplication.translate("MainWindow", u"Export Image", None))
        self.actionGenerate_while_drawing.setText(QCoreApplication.translate("MainWindow", u"Generate while drawing", None))
        self.actionOverlay_input_image.setText(QCoreApplication.translate("MainWindow", u"Overlay input image", None))
        self.enable_controlnet.setText(QCoreApplication.translate("MainWindow", u"Enabled", None))
        self.actionUnload_LLm.setText(QCoreApplication.translate("MainWindow", u"Unload LLM", None))
        self.actionUnload_Image_model.setText(QCoreApplication.translate("MainWindow", u"Unload Image model", None))
        self.actionClear_Memory.setText(QCoreApplication.translate("MainWindow", u"Clear Memory", None))
        self.actionSafety_Checker.setText(QCoreApplication.translate("MainWindow", u"Safety Checker", None))
        self.outpaint_import.setText(QCoreApplication.translate("MainWindow", u"Import", None))
        self.outpaint_export.setText(QCoreApplication.translate("MainWindow", u"Export", None))
        self.outpaint_enabled.setText(QCoreApplication.translate("MainWindow", u"Enabled", None))
        self.actionModel_Manager_4.setText(QCoreApplication.translate("MainWindow", u"Model Manager", None))
        self.actionRun_setup_wizard_2.setText(QCoreApplication.translate("MainWindow", u"Run Setup Wizard", None))
        self.actionStats.setText(QCoreApplication.translate("MainWindow", u"Stats", None))
        self.actionSettings.setText(QCoreApplication.translate("MainWindow", u"Preferences", None))
        self.actionToggle_LLM.setText(QCoreApplication.translate("MainWindow", u"Toggle LLM", None))
        self.actionToggle_Text_to_Speech.setText(QCoreApplication.translate("MainWindow", u"Toggle Text to Speech", None))
        self.actionToggle_Speech_to_Text.setText(QCoreApplication.translate("MainWindow", u"Toggle Speech to Text", None))
        self.actionToggle_Stable_Diffusion.setText(QCoreApplication.translate("MainWindow", u"Toggle Stable Diffusion", None))
        self.actionToggle_Controlnet.setText(QCoreApplication.translate("MainWindow", u"Toggle Controlnet", None))
        self.actionExport_3.setText(QCoreApplication.translate("MainWindow", u"Export Image", None))
        self.actionToggle_Active_Grid_Area.setText(QCoreApplication.translate("MainWindow", u"Toggle Active Grid Area", None))
        self.actionToggle_Selection.setText(QCoreApplication.translate("MainWindow", u"Toggle Selection", None))
        self.actionToggle_Brush.setText(QCoreApplication.translate("MainWindow", u"Toggle Brush", None))
        self.actionToggle_Grid.setText(QCoreApplication.translate("MainWindow", u"Toggle Grid", None))
        self.actionRecenter.setText(QCoreApplication.translate("MainWindow", u"Recenter", None))
        self.actionToggle_Eraser.setText(QCoreApplication.translate("MainWindow", u"Toggle Eraser", None))
        self.actionMask_toggle.setText(QCoreApplication.translate("MainWindow", u"Mask", None))
#if QT_CONFIG(tooltip)
        self.actionMask_toggle.setToolTip(QCoreApplication.translate("MainWindow", u"Toggle Mask", None))
#endif // QT_CONFIG(tooltip)
        self.menuFile.setTitle(QCoreApplication.translate("MainWindow", u"File", None))
        self.menuEdit.setTitle(QCoreApplication.translate("MainWindow", u"Edit", None))
        self.menuFilters.setTitle(QCoreApplication.translate("MainWindow", u"Filters", None))
        self.menuAbout.setTitle(QCoreApplication.translate("MainWindow", u"Help", None))
        self.menuImage.setTitle(QCoreApplication.translate("MainWindow", u"Canvas", None))
        self.menuView.setTitle(QCoreApplication.translate("MainWindow", u"View", None))
        self.menuTools.setTitle(QCoreApplication.translate("MainWindow", u"Tools", None))
        self.toolBar.setWindowTitle(QCoreApplication.translate("MainWindow", u"toolBar", None))
#if QT_CONFIG(tooltip)
        self.toolBar.setToolTip(QCoreApplication.translate("MainWindow", u"Export Image", None))
#endif // QT_CONFIG(tooltip)
        self.model_toolbar.setWindowTitle(QCoreApplication.translate("MainWindow", u"toolBar_2", None))
    # retranslateUi

