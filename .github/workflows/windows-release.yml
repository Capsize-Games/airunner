name: Windows Release Build

on:
  release:
    types: [published] # Trigger when a new release is published
  workflow_dispatch: # Allow manual triggering

env:
  DOCKER_BUILDKIT: 1
  # Don't use host UID/GID mapping for Windows build - the Dockerfile creates a specific user

jobs:
  buildWindows:
    runs-on: ubuntu-latest # Use GitHub-hosted runner
    permissions:
      contents: write # Needed to upload release assets

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }} # Use a Personal Access Token (PAT)

      - name: Create .env file for Docker Compose
        run: |
          echo "BUTLER_API_KEY=${{ secrets.BUTLER_API_KEY }}" > .env
          echo "DEV_ENV=0" >> .env
          echo "AIRUNNER_ENVIRONMENT=prod" >> .env
          echo "PYTHONOPTIMIZE=0" >> .env

      - name: Build Wine Docker Image
        run: |
          docker compose -f package/windows/docker-compose.yml build --progress=plain airunner_windows_package
          docker tag capsize-games/airunner/airunner:windows_builder ghcr.io/capsize-games/airunner/airunner:windows_builder
          docker push ghcr.io/capsize-games/airunner/airunner:windows_builder
        
      - name: Run PyInstaller Build Script in Container
        run: |
          # Ensure the build script is executable
          chmod +x pyinstaller/build_windows.sh
          # Run the build using docker compose run
          docker compose -f package/windows/docker-compose.yml run --rm airunner_windows_package ./pyinstaller/build_windows.sh

      - name: Get version from setup.py
        id: get_version
        run: |
          VERSION=$(python -c "import re; print(re.search(r'version=\"([^\"]+)\"', open('setup.py').read()).group(1))")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          
      - name: Archive Windows Build Output
        run: |
          # The output is expected in dist/airunner_windows relative to the project root
          cd dist
          zip -r ../airunner-windows-${{ steps.get_version.outputs.version }}.zip airunner_windows
          cd ..

      - name: Upload Windows Build Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./airunner-windows-${{ steps.get_version.outputs.version }}.zip
          asset_name: airunner-windows-${{ steps.get_version.outputs.version }}.zip
          asset_content_type: application/zip

      - name: Clean up Docker
        if: always()
        run: |
          echo "Cleaning up Docker resources..."
          docker compose -f package/windows/docker-compose.yml down --volumes --remove-orphans || true
          docker system prune -af
